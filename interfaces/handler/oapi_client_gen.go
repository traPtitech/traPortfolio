// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package handler

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetContests request
	GetContests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContest request with any body
	PostContestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContest(ctx context.Context, body PostContestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContest request
	DeleteContest(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContest request
	GetContest(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditContest request with any body
	EditContestWithBody(ctx context.Context, contestId ContestIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditContest(ctx context.Context, contestId ContestIdInPath, body EditContestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContestTeams request
	GetContestTeams(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContestTeam request with any body
	PostContestTeamWithBody(ctx context.Context, contestId ContestIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContestTeam(ctx context.Context, contestId ContestIdInPath, body PostContestTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContestTeam request
	DeleteContestTeam(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContestTeam request
	GetContestTeam(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditContestTeam request with any body
	EditContestTeamWithBody(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditContestTeam(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body EditContestTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContestTeamMembers request with any body
	DeleteContestTeamMembersWithBody(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteContestTeamMembers(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body DeleteContestTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContestTeamMembers request
	GetContestTeamMembers(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContestTeamMembers request with any body
	PostContestTeamMembersWithBody(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContestTeamMembers(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body PostContestTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvent request
	GetEvent(ctx context.Context, eventId EventIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditEvent request with any body
	EditEventWithBody(ctx context.Context, eventId EventIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditEvent(ctx context.Context, eventId EventIdInPath, body EditEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroups request
	GetGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroup request
	GetGroup(ctx context.Context, groupId GroupIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProject request with any body
	PostProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProject(ctx context.Context, body PostProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProject request
	GetProject(ctx context.Context, projectId ProjectIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditProject request with any body
	EditProjectWithBody(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditProject(ctx context.Context, projectId ProjectIdInPath, body EditProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectMembers request with any body
	DeleteProjectMembersWithBody(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteProjectMembers(ctx context.Context, projectId ProjectIdInPath, body DeleteProjectMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectMembers request
	GetProjectMembers(ctx context.Context, projectId ProjectIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddProjectMembers request with any body
	AddProjectMembersWithBody(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddProjectMembers(ctx context.Context, projectId ProjectIdInPath, body AddProjectMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditUser request with any body
	EditUserWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditUser(ctx context.Context, userId UserIdInPath, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAccounts request
	GetUserAccounts(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAccount request with any body
	AddAccountWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAccount(ctx context.Context, userId UserIdInPath, body AddAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccount request
	DeleteAccount(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAccount request
	GetUserAccount(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditUserAccount request with any body
	EditUserAccountWithBody(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditUserAccount(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, body EditUserAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserContests request
	GetUserContests(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserEvents request
	GetUserEvents(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroups request
	GetUserGroups(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProjects request
	GetUserProjects(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetContests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContest(ctx context.Context, body PostContestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContest(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContestRequest(c.Server, contestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContest(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestRequest(c.Server, contestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditContestWithBody(ctx context.Context, contestId ContestIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditContestRequestWithBody(c.Server, contestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditContest(ctx context.Context, contestId ContestIdInPath, body EditContestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditContestRequest(c.Server, contestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContestTeams(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestTeamsRequest(c.Server, contestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContestTeamWithBody(ctx context.Context, contestId ContestIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContestTeamRequestWithBody(c.Server, contestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContestTeam(ctx context.Context, contestId ContestIdInPath, body PostContestTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContestTeamRequest(c.Server, contestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContestTeam(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContestTeamRequest(c.Server, contestId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContestTeam(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestTeamRequest(c.Server, contestId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditContestTeamWithBody(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditContestTeamRequestWithBody(c.Server, contestId, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditContestTeam(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body EditContestTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditContestTeamRequest(c.Server, contestId, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContestTeamMembersWithBody(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContestTeamMembersRequestWithBody(c.Server, contestId, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContestTeamMembers(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body DeleteContestTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContestTeamMembersRequest(c.Server, contestId, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContestTeamMembers(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestTeamMembersRequest(c.Server, contestId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContestTeamMembersWithBody(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContestTeamMembersRequestWithBody(c.Server, contestId, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContestTeamMembers(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body PostContestTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContestTeamMembersRequest(c.Server, contestId, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvent(ctx context.Context, eventId EventIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditEventWithBody(ctx context.Context, eventId EventIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditEventRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditEvent(ctx context.Context, eventId EventIdInPath, body EditEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditEventRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroup(ctx context.Context, groupId GroupIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProject(ctx context.Context, body PostProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProject(ctx context.Context, projectId ProjectIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditProjectWithBody(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditProjectRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditProject(ctx context.Context, projectId ProjectIdInPath, body EditProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditProjectRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectMembersWithBody(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectMembersRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectMembers(ctx context.Context, projectId ProjectIdInPath, body DeleteProjectMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectMembersRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectMembers(ctx context.Context, projectId ProjectIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectMembersRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProjectMembersWithBody(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProjectMembersRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProjectMembers(ctx context.Context, projectId ProjectIdInPath, body AddProjectMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProjectMembersRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUser(ctx context.Context, userId UserIdInPath, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAccounts(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAccountsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAccountWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAccountRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAccount(ctx context.Context, userId UserIdInPath, body AddAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAccountRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccount(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountRequest(c.Server, userId, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAccount(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAccountRequest(c.Server, userId, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserAccountWithBody(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserAccountRequestWithBody(c.Server, userId, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserAccount(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, body EditUserAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserAccountRequest(c.Server, userId, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserContests(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserContestsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserEvents(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserEventsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroups(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProjects(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProjectsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetContestsRequest generates requests for GetContests
func NewGetContestsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContestRequest calls the generic PostContest builder with application/json body
func NewPostContestRequest(server string, body PostContestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContestRequestWithBody generates requests for PostContest with any type of body
func NewPostContestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContestRequest generates requests for DeleteContest
func NewDeleteContestRequest(server string, contestId ContestIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContestRequest generates requests for GetContest
func NewGetContestRequest(server string, contestId ContestIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditContestRequest calls the generic EditContest builder with application/json body
func NewEditContestRequest(server string, contestId ContestIdInPath, body EditContestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditContestRequestWithBody(server, contestId, "application/json", bodyReader)
}

// NewEditContestRequestWithBody generates requests for EditContest with any type of body
func NewEditContestRequestWithBody(server string, contestId ContestIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContestTeamsRequest generates requests for GetContestTeams
func NewGetContestTeamsRequest(server string, contestId ContestIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContestTeamRequest calls the generic PostContestTeam builder with application/json body
func NewPostContestTeamRequest(server string, contestId ContestIdInPath, body PostContestTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContestTeamRequestWithBody(server, contestId, "application/json", bodyReader)
}

// NewPostContestTeamRequestWithBody generates requests for PostContestTeam with any type of body
func NewPostContestTeamRequestWithBody(server string, contestId ContestIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContestTeamRequest generates requests for DeleteContestTeam
func NewDeleteContestTeamRequest(server string, contestId ContestIdInPath, teamId TeamIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContestTeamRequest generates requests for GetContestTeam
func NewGetContestTeamRequest(server string, contestId ContestIdInPath, teamId TeamIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditContestTeamRequest calls the generic EditContestTeam builder with application/json body
func NewEditContestTeamRequest(server string, contestId ContestIdInPath, teamId TeamIdInPath, body EditContestTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditContestTeamRequestWithBody(server, contestId, teamId, "application/json", bodyReader)
}

// NewEditContestTeamRequestWithBody generates requests for EditContestTeam with any type of body
func NewEditContestTeamRequestWithBody(server string, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContestTeamMembersRequest calls the generic DeleteContestTeamMembers builder with application/json body
func NewDeleteContestTeamMembersRequest(server string, contestId ContestIdInPath, teamId TeamIdInPath, body DeleteContestTeamMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteContestTeamMembersRequestWithBody(server, contestId, teamId, "application/json", bodyReader)
}

// NewDeleteContestTeamMembersRequestWithBody generates requests for DeleteContestTeamMembers with any type of body
func NewDeleteContestTeamMembersRequestWithBody(server string, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s/teams/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContestTeamMembersRequest generates requests for GetContestTeamMembers
func NewGetContestTeamMembersRequest(server string, contestId ContestIdInPath, teamId TeamIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s/teams/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContestTeamMembersRequest calls the generic PostContestTeamMembers builder with application/json body
func NewPostContestTeamMembersRequest(server string, contestId ContestIdInPath, teamId TeamIdInPath, body PostContestTeamMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContestTeamMembersRequestWithBody(server, contestId, teamId, "application/json", bodyReader)
}

// NewPostContestTeamMembersRequestWithBody generates requests for PostContestTeamMembers with any type of body
func NewPostContestTeamMembersRequestWithBody(server string, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s/teams/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventRequest generates requests for GetEvent
func NewGetEventRequest(server string, eventId EventIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditEventRequest calls the generic EditEvent builder with application/json body
func NewEditEventRequest(server string, eventId EventIdInPath, body EditEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditEventRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewEditEventRequestWithBody generates requests for EditEvent with any type of body
func NewEditEventRequestWithBody(server string, eventId EventIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupsRequest generates requests for GetGroups
func NewGetGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRequest generates requests for GetGroup
func NewGetGroupRequest(server string, groupId GroupIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectRequest calls the generic PostProject builder with application/json body
func NewPostProjectRequest(server string, body PostProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProjectRequestWithBody generates requests for PostProject with any type of body
func NewPostProjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectRequest generates requests for GetProject
func NewGetProjectRequest(server string, projectId ProjectIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditProjectRequest calls the generic EditProject builder with application/json body
func NewEditProjectRequest(server string, projectId ProjectIdInPath, body EditProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditProjectRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewEditProjectRequestWithBody generates requests for EditProject with any type of body
func NewEditProjectRequestWithBody(server string, projectId ProjectIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectMembersRequest calls the generic DeleteProjectMembers builder with application/json body
func NewDeleteProjectMembersRequest(server string, projectId ProjectIdInPath, body DeleteProjectMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteProjectMembersRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewDeleteProjectMembersRequestWithBody generates requests for DeleteProjectMembers with any type of body
func NewDeleteProjectMembersRequestWithBody(server string, projectId ProjectIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectMembersRequest generates requests for GetProjectMembers
func NewGetProjectMembersRequest(server string, projectId ProjectIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddProjectMembersRequest calls the generic AddProjectMembers builder with application/json body
func NewAddProjectMembersRequest(server string, projectId ProjectIdInPath, body AddProjectMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddProjectMembersRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewAddProjectMembersRequestWithBody generates requests for AddProjectMembers with any type of body
func NewAddProjectMembersRequestWithBody(server string, projectId ProjectIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeSuspended != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeSuspended", runtime.ParamLocationQuery, *params.IncludeSuspended); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserRequest calls the generic EditUser builder with application/json body
func NewEditUserRequest(server string, userId UserIdInPath, body EditUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewEditUserRequestWithBody generates requests for EditUser with any type of body
func NewEditUserRequestWithBody(server string, userId UserIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserAccountsRequest generates requests for GetUserAccounts
func NewGetUserAccountsRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddAccountRequest calls the generic AddAccount builder with application/json body
func NewAddAccountRequest(server string, userId UserIdInPath, body AddAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAccountRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewAddAccountRequestWithBody generates requests for AddAccount with any type of body
func NewAddAccountRequestWithBody(server string, userId UserIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountRequest generates requests for DeleteAccount
func NewDeleteAccountRequest(server string, userId UserIdInPath, accountId AccountIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAccountRequest generates requests for GetUserAccount
func NewGetUserAccountRequest(server string, userId UserIdInPath, accountId AccountIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserAccountRequest calls the generic EditUserAccount builder with application/json body
func NewEditUserAccountRequest(server string, userId UserIdInPath, accountId AccountIdInPath, body EditUserAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserAccountRequestWithBody(server, userId, accountId, "application/json", bodyReader)
}

// NewEditUserAccountRequestWithBody generates requests for EditUserAccount with any type of body
func NewEditUserAccountRequestWithBody(server string, userId UserIdInPath, accountId AccountIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserContestsRequest generates requests for GetUserContests
func NewGetUserContestsRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/contests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserEventsRequest generates requests for GetUserEvents
func NewGetUserEventsRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupsRequest generates requests for GetUserGroups
func NewGetUserGroupsRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProjectsRequest generates requests for GetUserProjects
func NewGetUserProjectsRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetContests request
	GetContestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContestsResponse, error)

	// PostContest request with any body
	PostContestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContestResponse, error)

	PostContestWithResponse(ctx context.Context, body PostContestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContestResponse, error)

	// DeleteContest request
	DeleteContestWithResponse(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*DeleteContestResponse, error)

	// GetContest request
	GetContestWithResponse(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*GetContestResponse, error)

	// EditContest request with any body
	EditContestWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditContestResponse, error)

	EditContestWithResponse(ctx context.Context, contestId ContestIdInPath, body EditContestJSONRequestBody, reqEditors ...RequestEditorFn) (*EditContestResponse, error)

	// GetContestTeams request
	GetContestTeamsWithResponse(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*GetContestTeamsResponse, error)

	// PostContestTeam request with any body
	PostContestTeamWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContestTeamResponse, error)

	PostContestTeamWithResponse(ctx context.Context, contestId ContestIdInPath, body PostContestTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContestTeamResponse, error)

	// DeleteContestTeam request
	DeleteContestTeamWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*DeleteContestTeamResponse, error)

	// GetContestTeam request
	GetContestTeamWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*GetContestTeamResponse, error)

	// EditContestTeam request with any body
	EditContestTeamWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditContestTeamResponse, error)

	EditContestTeamWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body EditContestTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*EditContestTeamResponse, error)

	// DeleteContestTeamMembers request with any body
	DeleteContestTeamMembersWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteContestTeamMembersResponse, error)

	DeleteContestTeamMembersWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body DeleteContestTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteContestTeamMembersResponse, error)

	// GetContestTeamMembers request
	GetContestTeamMembersWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*GetContestTeamMembersResponse, error)

	// PostContestTeamMembers request with any body
	PostContestTeamMembersWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContestTeamMembersResponse, error)

	PostContestTeamMembersWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body PostContestTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContestTeamMembersResponse, error)

	// GetEvents request
	GetEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// GetEvent request
	GetEventWithResponse(ctx context.Context, eventId EventIdInPath, reqEditors ...RequestEditorFn) (*GetEventResponse, error)

	// EditEvent request with any body
	EditEventWithBodyWithResponse(ctx context.Context, eventId EventIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditEventResponse, error)

	EditEventWithResponse(ctx context.Context, eventId EventIdInPath, body EditEventJSONRequestBody, reqEditors ...RequestEditorFn) (*EditEventResponse, error)

	// GetGroups request
	GetGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error)

	// GetGroup request
	GetGroupWithResponse(ctx context.Context, groupId GroupIdInPath, reqEditors ...RequestEditorFn) (*GetGroupResponse, error)

	// GetProjects request
	GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// PostProject request with any body
	PostProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectResponse, error)

	PostProjectWithResponse(ctx context.Context, body PostProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectResponse, error)

	// GetProject request
	GetProjectWithResponse(ctx context.Context, projectId ProjectIdInPath, reqEditors ...RequestEditorFn) (*GetProjectResponse, error)

	// EditProject request with any body
	EditProjectWithBodyWithResponse(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditProjectResponse, error)

	EditProjectWithResponse(ctx context.Context, projectId ProjectIdInPath, body EditProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*EditProjectResponse, error)

	// DeleteProjectMembers request with any body
	DeleteProjectMembersWithBodyWithResponse(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProjectMembersResponse, error)

	DeleteProjectMembersWithResponse(ctx context.Context, projectId ProjectIdInPath, body DeleteProjectMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProjectMembersResponse, error)

	// GetProjectMembers request
	GetProjectMembersWithResponse(ctx context.Context, projectId ProjectIdInPath, reqEditors ...RequestEditorFn) (*GetProjectMembersResponse, error)

	// AddProjectMembers request with any body
	AddProjectMembersWithBodyWithResponse(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProjectMembersResponse, error)

	AddProjectMembersWithResponse(ctx context.Context, projectId ProjectIdInPath, body AddProjectMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProjectMembersResponse, error)

	// GetUsers request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// EditUser request with any body
	EditUserWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserResponse, error)

	EditUserWithResponse(ctx context.Context, userId UserIdInPath, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserResponse, error)

	// GetUserAccounts request
	GetUserAccountsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserAccountsResponse, error)

	// AddAccount request with any body
	AddAccountWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAccountResponse, error)

	AddAccountWithResponse(ctx context.Context, userId UserIdInPath, body AddAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAccountResponse, error)

	// DeleteAccount request
	DeleteAccountWithResponse(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	// GetUserAccount request
	GetUserAccountWithResponse(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, reqEditors ...RequestEditorFn) (*GetUserAccountResponse, error)

	// EditUserAccount request with any body
	EditUserAccountWithBodyWithResponse(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserAccountResponse, error)

	EditUserAccountWithResponse(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, body EditUserAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserAccountResponse, error)

	// GetUserContests request
	GetUserContestsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserContestsResponse, error)

	// GetUserEvents request
	GetUserEventsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserEventsResponse, error)

	// GetUserGroups request
	GetUserGroupsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserGroupsResponse, error)

	// GetUserProjects request
	GetUserProjectsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserProjectsResponse, error)
}

type GetContestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Contest
}

// Status returns HTTPResponse.Status
func (r GetContestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContestDetail
}

// Status returns HTTPResponse.Status
func (r PostContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContestDetail
}

// Status returns HTTPResponse.Status
func (r GetContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContestTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ContestTeam
}

// Status returns HTTPResponse.Status
func (r GetContestTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContestTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContestTeam
}

// Status returns HTTPResponse.Status
func (r PostContestTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContestTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContestTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContestTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContestTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContestTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContestTeamDetail
}

// Status returns HTTPResponse.Status
func (r GetContestTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditContestTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditContestTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditContestTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContestTeamMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContestTeamMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContestTeamMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContestTeamMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetContestTeamMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestTeamMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContestTeamMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostContestTeamMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContestTeamMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventDetail
}

// Status returns HTTPResponse.Status
func (r GetEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r GetGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupDetail
}

// Status returns HTTPResponse.Status
func (r GetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r PostProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectDetail
}

// Status returns HTTPResponse.Status
func (r GetProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetProjectMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddProjectMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddProjectMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddProjectMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDetail
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r GetUserAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Account
}

// Status returns HTTPResponse.Status
func (r AddAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r GetUserAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditUserAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserContestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ContestTeamWithContestName
}

// Status returns HTTPResponse.Status
func (r GetUserContestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserContestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
}

// Status returns HTTPResponse.Status
func (r GetUserEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserGroup
}

// Status returns HTTPResponse.Status
func (r GetUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserProject
}

// Status returns HTTPResponse.Status
func (r GetUserProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetContestsWithResponse request returning *GetContestsResponse
func (c *ClientWithResponses) GetContestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContestsResponse, error) {
	rsp, err := c.GetContests(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestsResponse(rsp)
}

// PostContestWithBodyWithResponse request with arbitrary body returning *PostContestResponse
func (c *ClientWithResponses) PostContestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContestResponse, error) {
	rsp, err := c.PostContestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContestResponse(rsp)
}

func (c *ClientWithResponses) PostContestWithResponse(ctx context.Context, body PostContestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContestResponse, error) {
	rsp, err := c.PostContest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContestResponse(rsp)
}

// DeleteContestWithResponse request returning *DeleteContestResponse
func (c *ClientWithResponses) DeleteContestWithResponse(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*DeleteContestResponse, error) {
	rsp, err := c.DeleteContest(ctx, contestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContestResponse(rsp)
}

// GetContestWithResponse request returning *GetContestResponse
func (c *ClientWithResponses) GetContestWithResponse(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*GetContestResponse, error) {
	rsp, err := c.GetContest(ctx, contestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestResponse(rsp)
}

// EditContestWithBodyWithResponse request with arbitrary body returning *EditContestResponse
func (c *ClientWithResponses) EditContestWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditContestResponse, error) {
	rsp, err := c.EditContestWithBody(ctx, contestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditContestResponse(rsp)
}

func (c *ClientWithResponses) EditContestWithResponse(ctx context.Context, contestId ContestIdInPath, body EditContestJSONRequestBody, reqEditors ...RequestEditorFn) (*EditContestResponse, error) {
	rsp, err := c.EditContest(ctx, contestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditContestResponse(rsp)
}

// GetContestTeamsWithResponse request returning *GetContestTeamsResponse
func (c *ClientWithResponses) GetContestTeamsWithResponse(ctx context.Context, contestId ContestIdInPath, reqEditors ...RequestEditorFn) (*GetContestTeamsResponse, error) {
	rsp, err := c.GetContestTeams(ctx, contestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestTeamsResponse(rsp)
}

// PostContestTeamWithBodyWithResponse request with arbitrary body returning *PostContestTeamResponse
func (c *ClientWithResponses) PostContestTeamWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContestTeamResponse, error) {
	rsp, err := c.PostContestTeamWithBody(ctx, contestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContestTeamResponse(rsp)
}

func (c *ClientWithResponses) PostContestTeamWithResponse(ctx context.Context, contestId ContestIdInPath, body PostContestTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContestTeamResponse, error) {
	rsp, err := c.PostContestTeam(ctx, contestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContestTeamResponse(rsp)
}

// DeleteContestTeamWithResponse request returning *DeleteContestTeamResponse
func (c *ClientWithResponses) DeleteContestTeamWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*DeleteContestTeamResponse, error) {
	rsp, err := c.DeleteContestTeam(ctx, contestId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContestTeamResponse(rsp)
}

// GetContestTeamWithResponse request returning *GetContestTeamResponse
func (c *ClientWithResponses) GetContestTeamWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*GetContestTeamResponse, error) {
	rsp, err := c.GetContestTeam(ctx, contestId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestTeamResponse(rsp)
}

// EditContestTeamWithBodyWithResponse request with arbitrary body returning *EditContestTeamResponse
func (c *ClientWithResponses) EditContestTeamWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditContestTeamResponse, error) {
	rsp, err := c.EditContestTeamWithBody(ctx, contestId, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditContestTeamResponse(rsp)
}

func (c *ClientWithResponses) EditContestTeamWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body EditContestTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*EditContestTeamResponse, error) {
	rsp, err := c.EditContestTeam(ctx, contestId, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditContestTeamResponse(rsp)
}

// DeleteContestTeamMembersWithBodyWithResponse request with arbitrary body returning *DeleteContestTeamMembersResponse
func (c *ClientWithResponses) DeleteContestTeamMembersWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteContestTeamMembersResponse, error) {
	rsp, err := c.DeleteContestTeamMembersWithBody(ctx, contestId, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContestTeamMembersResponse(rsp)
}

func (c *ClientWithResponses) DeleteContestTeamMembersWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body DeleteContestTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteContestTeamMembersResponse, error) {
	rsp, err := c.DeleteContestTeamMembers(ctx, contestId, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContestTeamMembersResponse(rsp)
}

// GetContestTeamMembersWithResponse request returning *GetContestTeamMembersResponse
func (c *ClientWithResponses) GetContestTeamMembersWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, reqEditors ...RequestEditorFn) (*GetContestTeamMembersResponse, error) {
	rsp, err := c.GetContestTeamMembers(ctx, contestId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestTeamMembersResponse(rsp)
}

// PostContestTeamMembersWithBodyWithResponse request with arbitrary body returning *PostContestTeamMembersResponse
func (c *ClientWithResponses) PostContestTeamMembersWithBodyWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContestTeamMembersResponse, error) {
	rsp, err := c.PostContestTeamMembersWithBody(ctx, contestId, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContestTeamMembersResponse(rsp)
}

func (c *ClientWithResponses) PostContestTeamMembersWithResponse(ctx context.Context, contestId ContestIdInPath, teamId TeamIdInPath, body PostContestTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContestTeamMembersResponse, error) {
	rsp, err := c.PostContestTeamMembers(ctx, contestId, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContestTeamMembersResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// GetEventWithResponse request returning *GetEventResponse
func (c *ClientWithResponses) GetEventWithResponse(ctx context.Context, eventId EventIdInPath, reqEditors ...RequestEditorFn) (*GetEventResponse, error) {
	rsp, err := c.GetEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventResponse(rsp)
}

// EditEventWithBodyWithResponse request with arbitrary body returning *EditEventResponse
func (c *ClientWithResponses) EditEventWithBodyWithResponse(ctx context.Context, eventId EventIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditEventResponse, error) {
	rsp, err := c.EditEventWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditEventResponse(rsp)
}

func (c *ClientWithResponses) EditEventWithResponse(ctx context.Context, eventId EventIdInPath, body EditEventJSONRequestBody, reqEditors ...RequestEditorFn) (*EditEventResponse, error) {
	rsp, err := c.EditEvent(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditEventResponse(rsp)
}

// GetGroupsWithResponse request returning *GetGroupsResponse
func (c *ClientWithResponses) GetGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error) {
	rsp, err := c.GetGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsResponse(rsp)
}

// GetGroupWithResponse request returning *GetGroupResponse
func (c *ClientWithResponses) GetGroupWithResponse(ctx context.Context, groupId GroupIdInPath, reqEditors ...RequestEditorFn) (*GetGroupResponse, error) {
	rsp, err := c.GetGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// PostProjectWithBodyWithResponse request with arbitrary body returning *PostProjectResponse
func (c *ClientWithResponses) PostProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectResponse, error) {
	rsp, err := c.PostProjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectResponse(rsp)
}

func (c *ClientWithResponses) PostProjectWithResponse(ctx context.Context, body PostProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectResponse, error) {
	rsp, err := c.PostProject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectResponse(rsp)
}

// GetProjectWithResponse request returning *GetProjectResponse
func (c *ClientWithResponses) GetProjectWithResponse(ctx context.Context, projectId ProjectIdInPath, reqEditors ...RequestEditorFn) (*GetProjectResponse, error) {
	rsp, err := c.GetProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectResponse(rsp)
}

// EditProjectWithBodyWithResponse request with arbitrary body returning *EditProjectResponse
func (c *ClientWithResponses) EditProjectWithBodyWithResponse(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditProjectResponse, error) {
	rsp, err := c.EditProjectWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditProjectResponse(rsp)
}

func (c *ClientWithResponses) EditProjectWithResponse(ctx context.Context, projectId ProjectIdInPath, body EditProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*EditProjectResponse, error) {
	rsp, err := c.EditProject(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditProjectResponse(rsp)
}

// DeleteProjectMembersWithBodyWithResponse request with arbitrary body returning *DeleteProjectMembersResponse
func (c *ClientWithResponses) DeleteProjectMembersWithBodyWithResponse(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProjectMembersResponse, error) {
	rsp, err := c.DeleteProjectMembersWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectMembersResponse(rsp)
}

func (c *ClientWithResponses) DeleteProjectMembersWithResponse(ctx context.Context, projectId ProjectIdInPath, body DeleteProjectMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProjectMembersResponse, error) {
	rsp, err := c.DeleteProjectMembers(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectMembersResponse(rsp)
}

// GetProjectMembersWithResponse request returning *GetProjectMembersResponse
func (c *ClientWithResponses) GetProjectMembersWithResponse(ctx context.Context, projectId ProjectIdInPath, reqEditors ...RequestEditorFn) (*GetProjectMembersResponse, error) {
	rsp, err := c.GetProjectMembers(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectMembersResponse(rsp)
}

// AddProjectMembersWithBodyWithResponse request with arbitrary body returning *AddProjectMembersResponse
func (c *ClientWithResponses) AddProjectMembersWithBodyWithResponse(ctx context.Context, projectId ProjectIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProjectMembersResponse, error) {
	rsp, err := c.AddProjectMembersWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProjectMembersResponse(rsp)
}

func (c *ClientWithResponses) AddProjectMembersWithResponse(ctx context.Context, projectId ProjectIdInPath, body AddProjectMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProjectMembersResponse, error) {
	rsp, err := c.AddProjectMembers(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProjectMembersResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// EditUserWithBodyWithResponse request with arbitrary body returning *EditUserResponse
func (c *ClientWithResponses) EditUserWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserResponse, error) {
	rsp, err := c.EditUserWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

func (c *ClientWithResponses) EditUserWithResponse(ctx context.Context, userId UserIdInPath, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserResponse, error) {
	rsp, err := c.EditUser(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

// GetUserAccountsWithResponse request returning *GetUserAccountsResponse
func (c *ClientWithResponses) GetUserAccountsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserAccountsResponse, error) {
	rsp, err := c.GetUserAccounts(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAccountsResponse(rsp)
}

// AddAccountWithBodyWithResponse request with arbitrary body returning *AddAccountResponse
func (c *ClientWithResponses) AddAccountWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAccountResponse, error) {
	rsp, err := c.AddAccountWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAccountResponse(rsp)
}

func (c *ClientWithResponses) AddAccountWithResponse(ctx context.Context, userId UserIdInPath, body AddAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAccountResponse, error) {
	rsp, err := c.AddAccount(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAccountResponse(rsp)
}

// DeleteAccountWithResponse request returning *DeleteAccountResponse
func (c *ClientWithResponses) DeleteAccountWithResponse(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccount(ctx, userId, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountResponse(rsp)
}

// GetUserAccountWithResponse request returning *GetUserAccountResponse
func (c *ClientWithResponses) GetUserAccountWithResponse(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, reqEditors ...RequestEditorFn) (*GetUserAccountResponse, error) {
	rsp, err := c.GetUserAccount(ctx, userId, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAccountResponse(rsp)
}

// EditUserAccountWithBodyWithResponse request with arbitrary body returning *EditUserAccountResponse
func (c *ClientWithResponses) EditUserAccountWithBodyWithResponse(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserAccountResponse, error) {
	rsp, err := c.EditUserAccountWithBody(ctx, userId, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserAccountResponse(rsp)
}

func (c *ClientWithResponses) EditUserAccountWithResponse(ctx context.Context, userId UserIdInPath, accountId AccountIdInPath, body EditUserAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserAccountResponse, error) {
	rsp, err := c.EditUserAccount(ctx, userId, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserAccountResponse(rsp)
}

// GetUserContestsWithResponse request returning *GetUserContestsResponse
func (c *ClientWithResponses) GetUserContestsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserContestsResponse, error) {
	rsp, err := c.GetUserContests(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserContestsResponse(rsp)
}

// GetUserEventsWithResponse request returning *GetUserEventsResponse
func (c *ClientWithResponses) GetUserEventsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserEventsResponse, error) {
	rsp, err := c.GetUserEvents(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserEventsResponse(rsp)
}

// GetUserGroupsWithResponse request returning *GetUserGroupsResponse
func (c *ClientWithResponses) GetUserGroupsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserGroupsResponse, error) {
	rsp, err := c.GetUserGroups(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupsResponse(rsp)
}

// GetUserProjectsWithResponse request returning *GetUserProjectsResponse
func (c *ClientWithResponses) GetUserProjectsWithResponse(ctx context.Context, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetUserProjectsResponse, error) {
	rsp, err := c.GetUserProjects(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProjectsResponse(rsp)
}

// ParseGetContestsResponse parses an HTTP response from a GetContestsWithResponse call
func ParseGetContestsResponse(rsp *http.Response) (*GetContestsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Contest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContestResponse parses an HTTP response from a PostContestWithResponse call
func ParsePostContestResponse(rsp *http.Response) (*PostContestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContestDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteContestResponse parses an HTTP response from a DeleteContestWithResponse call
func ParseDeleteContestResponse(rsp *http.Response) (*DeleteContestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContestResponse parses an HTTP response from a GetContestWithResponse call
func ParseGetContestResponse(rsp *http.Response) (*GetContestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContestDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditContestResponse parses an HTTP response from a EditContestWithResponse call
func ParseEditContestResponse(rsp *http.Response) (*EditContestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContestTeamsResponse parses an HTTP response from a GetContestTeamsWithResponse call
func ParseGetContestTeamsResponse(rsp *http.Response) (*GetContestTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ContestTeam
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContestTeamResponse parses an HTTP response from a PostContestTeamWithResponse call
func ParsePostContestTeamResponse(rsp *http.Response) (*PostContestTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContestTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContestTeam
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteContestTeamResponse parses an HTTP response from a DeleteContestTeamWithResponse call
func ParseDeleteContestTeamResponse(rsp *http.Response) (*DeleteContestTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContestTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContestTeamResponse parses an HTTP response from a GetContestTeamWithResponse call
func ParseGetContestTeamResponse(rsp *http.Response) (*GetContestTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContestTeamDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditContestTeamResponse parses an HTTP response from a EditContestTeamWithResponse call
func ParseEditContestTeamResponse(rsp *http.Response) (*EditContestTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditContestTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteContestTeamMembersResponse parses an HTTP response from a DeleteContestTeamMembersWithResponse call
func ParseDeleteContestTeamMembersResponse(rsp *http.Response) (*DeleteContestTeamMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContestTeamMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContestTeamMembersResponse parses an HTTP response from a GetContestTeamMembersWithResponse call
func ParseGetContestTeamMembersResponse(rsp *http.Response) (*GetContestTeamMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestTeamMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContestTeamMembersResponse parses an HTTP response from a PostContestTeamMembersWithResponse call
func ParsePostContestTeamMembersResponse(rsp *http.Response) (*PostContestTeamMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContestTeamMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEventResponse parses an HTTP response from a GetEventWithResponse call
func ParseGetEventResponse(rsp *http.Response) (*GetEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditEventResponse parses an HTTP response from a EditEventWithResponse call
func ParseEditEventResponse(rsp *http.Response) (*EditEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupsResponse parses an HTTP response from a GetGroupsWithResponse call
func ParseGetGroupsResponse(rsp *http.Response) (*GetGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupResponse parses an HTTP response from a GetGroupWithResponse call
func ParseGetGroupResponse(rsp *http.Response) (*GetGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectResponse parses an HTTP response from a PostProjectWithResponse call
func ParsePostProjectResponse(rsp *http.Response) (*PostProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetProjectResponse parses an HTTP response from a GetProjectWithResponse call
func ParseGetProjectResponse(rsp *http.Response) (*GetProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditProjectResponse parses an HTTP response from a EditProjectWithResponse call
func ParseEditProjectResponse(rsp *http.Response) (*EditProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteProjectMembersResponse parses an HTTP response from a DeleteProjectMembersWithResponse call
func ParseDeleteProjectMembersResponse(rsp *http.Response) (*DeleteProjectMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectMembersResponse parses an HTTP response from a GetProjectMembersWithResponse call
func ParseGetProjectMembersResponse(rsp *http.Response) (*GetProjectMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddProjectMembersResponse parses an HTTP response from a AddProjectMembersWithResponse call
func ParseAddProjectMembersResponse(rsp *http.Response) (*AddProjectMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddProjectMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditUserResponse parses an HTTP response from a EditUserWithResponse call
func ParseEditUserResponse(rsp *http.Response) (*EditUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserAccountsResponse parses an HTTP response from a GetUserAccountsWithResponse call
func ParseGetUserAccountsResponse(rsp *http.Response) (*GetUserAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddAccountResponse parses an HTTP response from a AddAccountWithResponse call
func ParseAddAccountResponse(rsp *http.Response) (*AddAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAccountResponse parses an HTTP response from a DeleteAccountWithResponse call
func ParseDeleteAccountResponse(rsp *http.Response) (*DeleteAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserAccountResponse parses an HTTP response from a GetUserAccountWithResponse call
func ParseGetUserAccountResponse(rsp *http.Response) (*GetUserAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditUserAccountResponse parses an HTTP response from a EditUserAccountWithResponse call
func ParseEditUserAccountResponse(rsp *http.Response) (*EditUserAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditUserAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserContestsResponse parses an HTTP response from a GetUserContestsWithResponse call
func ParseGetUserContestsResponse(rsp *http.Response) (*GetUserContestsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserContestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ContestTeamWithContestName
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserEventsResponse parses an HTTP response from a GetUserEventsWithResponse call
func ParseGetUserEventsResponse(rsp *http.Response) (*GetUserEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserGroupsResponse parses an HTTP response from a GetUserGroupsWithResponse call
func ParseGetUserGroupsResponse(rsp *http.Response) (*GetUserGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserProjectsResponse parses an HTTP response from a GetUserProjectsWithResponse call
func ParseGetUserProjectsResponse(rsp *http.Response) (*GetUserProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
