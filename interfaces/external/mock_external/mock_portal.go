// Code generated by MockGen. DO NOT EDIT.
// Source: portal.go

// Package mock_external is a generated GoMock package.
package mock_external

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	external "github.com/traPtitech/traPortfolio/interfaces/external"
)

// MockPortalAPI is a mock of PortalAPI interface.
type MockPortalAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPortalAPIMockRecorder
}

// MockPortalAPIMockRecorder is the mock recorder for MockPortalAPI.
type MockPortalAPIMockRecorder struct {
	mock *MockPortalAPI
}

// NewMockPortalAPI creates a new mock instance.
func NewMockPortalAPI(ctrl *gomock.Controller) *MockPortalAPI {
	mock := &MockPortalAPI{ctrl: ctrl}
	mock.recorder = &MockPortalAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalAPI) EXPECT() *MockPortalAPIMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockPortalAPI) GetAll() ([]*external.PortalUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*external.PortalUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPortalAPIMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPortalAPI)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockPortalAPI) GetByID(traQID string) (*external.PortalUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", traQID)
	ret0, _ := ret[0].(*external.PortalUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPortalAPIMockRecorder) GetByID(traQID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPortalAPI)(nil).GetByID), traQID)
}
