// Code generated by MockGen. DO NOT EDIT.
// Source: sqlhandler.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "github.com/traPtitech/traPortfolio/interfaces/database"
)

// MockSQLHandler is a mock of SQLHandler interface.
type MockSQLHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSQLHandlerMockRecorder
}

// MockSQLHandlerMockRecorder is the mock recorder for MockSQLHandler.
type MockSQLHandlerMockRecorder struct {
	mock *MockSQLHandler
}

// NewMockSQLHandler creates a new mock instance.
func NewMockSQLHandler(ctrl *gomock.Controller) *MockSQLHandler {
	mock := &MockSQLHandler{ctrl: ctrl}
	mock.recorder = &MockSQLHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLHandler) EXPECT() *MockSQLHandlerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockSQLHandler) Begin() database.SQLHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockSQLHandlerMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockSQLHandler)(nil).Begin))
}

// Commit mocks base method.
func (m *MockSQLHandler) Commit() database.SQLHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSQLHandlerMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSQLHandler)(nil).Commit))
}

// Create mocks base method.
func (m *MockSQLHandler) Create(value interface{}) database.SQLHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSQLHandlerMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSQLHandler)(nil).Create), value)
}

// Delete mocks base method.
func (m *MockSQLHandler) Delete(value interface{}, where ...interface{}) database.SQLHandler {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSQLHandlerMockRecorder) Delete(value interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSQLHandler)(nil).Delete), varargs...)
}

// Error mocks base method.
func (m *MockSQLHandler) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockSQLHandlerMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockSQLHandler)(nil).Error))
}

// Find mocks base method.
func (m *MockSQLHandler) Find(out interface{}, where ...interface{}) database.SQLHandler {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockSQLHandlerMockRecorder) Find(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSQLHandler)(nil).Find), varargs...)
}

// First mocks base method.
func (m *MockSQLHandler) First(out interface{}, where ...interface{}) database.SQLHandler {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockSQLHandlerMockRecorder) First(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockSQLHandler)(nil).First), varargs...)
}

// Model mocks base method.
func (m *MockSQLHandler) Model(value interface{}) database.SQLHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockSQLHandlerMockRecorder) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockSQLHandler)(nil).Model), value)
}

// Preload mocks base method.
func (m *MockSQLHandler) Preload(query string, args ...interface{}) database.SQLHandler {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockSQLHandlerMockRecorder) Preload(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockSQLHandler)(nil).Preload), varargs...)
}

// Rollback mocks base method.
func (m *MockSQLHandler) Rollback() database.SQLHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSQLHandlerMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSQLHandler)(nil).Rollback))
}

// Transaction mocks base method.
func (m *MockSQLHandler) Transaction(fc func(database.SQLHandler) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", fc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockSQLHandlerMockRecorder) Transaction(fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockSQLHandler)(nil).Transaction), fc)
}

// Updates mocks base method.
func (m *MockSQLHandler) Updates(values interface{}) database.SQLHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", values)
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockSQLHandlerMockRecorder) Updates(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockSQLHandler)(nil).Updates), values)
}

// Where mocks base method.
func (m *MockSQLHandler) Where(query interface{}, args ...interface{}) database.SQLHandler {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(database.SQLHandler)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockSQLHandlerMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockSQLHandler)(nil).Where), varargs...)
}
