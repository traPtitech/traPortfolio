// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package infrastructure

import (
	"github.com/google/wire"
	"github.com/traPtitech/traPortfolio/interfaces/controllers"
	"github.com/traPtitech/traPortfolio/interfaces/repository"
	"github.com/traPtitech/traPortfolio/usecases/interactor"
	repository2 "github.com/traPtitech/traPortfolio/usecases/repository"
	"github.com/traPtitech/traPortfolio/usecases/usecase"
)

import (
	_ "github.com/jinzhu/gorm/dialects/mysql"
)

// Injectors from wire.go:

func InjectAPIServer() (controllers.API, error) {
	pingInteractor := interactor.NewPingInteractor()
	pingController := controllers.NewPingController(pingInteractor)
	sqlHandler, err := NewSQLHandler()
	if err != nil {
		return controllers.API{}, err
	}
	userRepository := repository.NewUserRepository(sqlHandler)
	userInteractor := interactor.NewUserInteractor(userRepository)
	userController := controllers.NewUserController(userInteractor)
	api := controllers.NewAPI(pingController, userController)
	return api, nil
}

// wire.go:

var pingSet = wire.NewSet(interactor.NewPingInteractor, controllers.NewPingController, wire.Bind(new(usecase.PingUsecase), new(*interactor.PingInteractor)))

var userSet = wire.NewSet(repository.NewUserRepository, interactor.NewUserInteractor, controllers.NewUserController, wire.Bind(new(repository2.UserRepository), new(*repository.UserRepository)), wire.Bind(new(usecase.UserUsecase), new(*interactor.UserInteractor)))

var sqlSet = wire.NewSet(NewSQLHandler)

var apiSet = wire.NewSet(controllers.NewAPI)
