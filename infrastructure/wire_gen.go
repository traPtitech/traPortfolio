// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package infrastructure

import (
	"github.com/google/wire"
	"github.com/traPtitech/traPortfolio/interfaces/database"
	"github.com/traPtitech/traPortfolio/interfaces/external"
	"github.com/traPtitech/traPortfolio/interfaces/repository"
	"github.com/traPtitech/traPortfolio/usecases/handler"
	repository2 "github.com/traPtitech/traPortfolio/usecases/repository"
	"github.com/traPtitech/traPortfolio/usecases/service/event_service"
	"github.com/traPtitech/traPortfolio/usecases/service/user_service"

	_ "github.com/jinzhu/gorm/dialects/mysql"
)

// Injectors from wire.go:

func InjectAPIServer(traQToken repository.TraQToken, portalToken repository.PortalToken) (handler.API, error) {
	pingHandler := handler.NewPingHandler()
	sqlHandler, err := NewSQLHandler()
	if err != nil {
		return handler.API{}, err
	}
	userRepository := repository.NewUserRepository(sqlHandler)
	traQRepository := repository.NewTraQRepository(traQToken)
	portalRepository := repository.NewPortalRepository(portalToken)
	userService := user_service.NewUserService(userRepository, traQRepository, portalRepository)
	userHandler := handler.NewUserHandler(userRepository, userService)
	knoqAPI, err := NewKnoqAPI()
	if err != nil {
		return handler.API{}, err
	}
	eventRepository := repository.NewEventRepository(sqlHandler, knoqAPI)
	knoqRepository := repository.NewKnoqRepository(knoqAPI)
	eventService := event_service.NewEventService(eventRepository, knoqRepository)
	eventHandler := handler.NewEventHandler(eventRepository, eventService)
	api := handler.NewAPI(pingHandler, userHandler, eventHandler)
	return api, nil
}

// wire.go:

var portalSet = wire.NewSet(repository.NewPortalRepository, wire.Bind(new(repository2.PortalRepository), new(*repository.PortalRepository)))

var traQSet = wire.NewSet(repository.NewTraQRepository, wire.Bind(new(repository2.TraQRepository), new(*repository.TraQRepository)))

var pingSet = wire.NewSet(handler.NewPingHandler)

var userSet = wire.NewSet(repository.NewUserRepository, user_service.NewUserService, handler.NewUserHandler, wire.Bind(new(repository2.UserRepository), new(*repository.UserRepository)), wire.Bind(new(usecase.UserUsecase), new(*handler.UserHandler)))

var knoQSet = wire.NewSet(
	NewKnoqAPI, repository.NewKnoqRepository, wire.Bind(new(external.KnoqAPI), new(*KnoqAPI)), wire.Bind(new(repository2.KnoqRepository), new(*repository.KnoqRepository)),
)

var eventSet = wire.NewSet(
	knoQSet, repository.NewEventRepository, event_service.NewEventService, handler.NewEventHandler, wire.Bind(new(repository2.EventRepository), new(*repository.EventRepository)),
)

var sqlSet = wire.NewSet(
	NewSQLHandler, wire.Bind(new(database.SQLHandler), new(*SQLHandler)),
)

var apiSet = wire.NewSet(handler.NewAPI)
