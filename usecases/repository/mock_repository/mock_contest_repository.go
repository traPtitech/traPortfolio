// Code generated by MockGen. DO NOT EDIT.
// Source: contest_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/traPtitech/traPortfolio/domain"
	repository "github.com/traPtitech/traPortfolio/usecases/repository"
)

// MockContestRepository is a mock of ContestRepository interface.
type MockContestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContestRepositoryMockRecorder
}

// MockContestRepositoryMockRecorder is the mock recorder for MockContestRepository.
type MockContestRepositoryMockRecorder struct {
	mock *MockContestRepository
}

// NewMockContestRepository creates a new mock instance.
func NewMockContestRepository(ctrl *gomock.Controller) *MockContestRepository {
	mock := &MockContestRepository{ctrl: ctrl}
	mock.recorder = &MockContestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContestRepository) EXPECT() *MockContestRepositoryMockRecorder {
	return m.recorder
}

// AddContestTeamMember mocks base method.
func (m *MockContestRepository) AddContestTeamMember(teamID uuid.UUID, memberIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContestTeamMember", teamID, memberIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContestTeamMember indicates an expected call of AddContestTeamMember.
func (mr *MockContestRepositoryMockRecorder) AddContestTeamMember(teamID, memberIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContestTeamMember", reflect.TypeOf((*MockContestRepository)(nil).AddContestTeamMember), teamID, memberIDs)
}

// CreateContest mocks base method.
func (m *MockContestRepository) CreateContest(args *repository.CreateContestArgs) (*domain.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContest", args)
	ret0, _ := ret[0].(*domain.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContest indicates an expected call of CreateContest.
func (mr *MockContestRepositoryMockRecorder) CreateContest(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContest", reflect.TypeOf((*MockContestRepository)(nil).CreateContest), args)
}

// CreateContestTeam mocks base method.
func (m *MockContestRepository) CreateContestTeam(contestID uuid.UUID, args *repository.CreateContestTeamArgs) (*domain.ContestTeamDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContestTeam", contestID, args)
	ret0, _ := ret[0].(*domain.ContestTeamDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContestTeam indicates an expected call of CreateContestTeam.
func (mr *MockContestRepositoryMockRecorder) CreateContestTeam(contestID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContestTeam", reflect.TypeOf((*MockContestRepository)(nil).CreateContestTeam), contestID, args)
}

// DeleteContest mocks base method.
func (m *MockContestRepository) DeleteContest(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContest", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContest indicates an expected call of DeleteContest.
func (mr *MockContestRepositoryMockRecorder) DeleteContest(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContest", reflect.TypeOf((*MockContestRepository)(nil).DeleteContest), id)
}

// DeleteContestTeamMember mocks base method.
func (m *MockContestRepository) DeleteContestTeamMember(teamID uuid.UUID, memberIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContestTeamMember", teamID, memberIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContestTeamMember indicates an expected call of DeleteContestTeamMember.
func (mr *MockContestRepositoryMockRecorder) DeleteContestTeamMember(teamID, memberIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContestTeamMember", reflect.TypeOf((*MockContestRepository)(nil).DeleteContestTeamMember), teamID, memberIDs)
}

// GetContest mocks base method.
func (m *MockContestRepository) GetContest(ID uuid.UUID) (*domain.ContestDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContest", ID)
	ret0, _ := ret[0].(*domain.ContestDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContest indicates an expected call of GetContest.
func (mr *MockContestRepositoryMockRecorder) GetContest(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContest", reflect.TypeOf((*MockContestRepository)(nil).GetContest), ID)
}

// GetContestTeamMember mocks base method.
func (m *MockContestRepository) GetContestTeamMember(teamID, contestID uuid.UUID) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContestTeamMember", teamID, contestID)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContestTeamMember indicates an expected call of GetContestTeamMember.
func (mr *MockContestRepositoryMockRecorder) GetContestTeamMember(teamID, contestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContestTeamMember", reflect.TypeOf((*MockContestRepository)(nil).GetContestTeamMember), teamID, contestID)
}

// GetContests mocks base method.
func (m *MockContestRepository) GetContests() ([]*domain.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContests")
	ret0, _ := ret[0].([]*domain.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContests indicates an expected call of GetContests.
func (mr *MockContestRepositoryMockRecorder) GetContests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContests", reflect.TypeOf((*MockContestRepository)(nil).GetContests))
}

// UpdateContest mocks base method.
func (m *MockContestRepository) UpdateContest(id uuid.UUID, changes map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContest", id, changes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContest indicates an expected call of UpdateContest.
func (mr *MockContestRepositoryMockRecorder) UpdateContest(id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContest", reflect.TypeOf((*MockContestRepository)(nil).UpdateContest), id, changes)
}

// UpdateContestTeam mocks base method.
func (m *MockContestRepository) UpdateContestTeam(teamID uuid.UUID, changes map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContestTeam", teamID, changes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContestTeam indicates an expected call of UpdateContestTeam.
func (mr *MockContestRepositoryMockRecorder) UpdateContestTeam(teamID, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContestTeam", reflect.TypeOf((*MockContestRepository)(nil).UpdateContestTeam), teamID, changes)
}
