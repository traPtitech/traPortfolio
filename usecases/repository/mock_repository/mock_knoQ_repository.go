// Code generated by MockGen. DO NOT EDIT.
// Source: knoQ_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/traPtitech/traPortfolio/domain"
)

// MockKnoqRepository is a mock of KnoqRepository interface.
type MockKnoqRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKnoqRepositoryMockRecorder
}

// MockKnoqRepositoryMockRecorder is the mock recorder for MockKnoqRepository.
type MockKnoqRepositoryMockRecorder struct {
	mock *MockKnoqRepository
}

// NewMockKnoqRepository creates a new mock instance.
func NewMockKnoqRepository(ctrl *gomock.Controller) *MockKnoqRepository {
	mock := &MockKnoqRepository{ctrl: ctrl}
	mock.recorder = &MockKnoqRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnoqRepository) EXPECT() *MockKnoqRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockKnoqRepository) GetAll() ([]*domain.KnoQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*domain.KnoQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockKnoqRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockKnoqRepository)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockKnoqRepository) GetByID(id uuid.UUID) (*domain.KnoQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.KnoQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockKnoqRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockKnoqRepository)(nil).GetByID), id)
}
