// Code generated by MockGen. DO NOT EDIT.
// Source: portal_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/traPtitech/traPortfolio/domain"
)

// MockPortalRepository is a mock of PortalRepository interface.
type MockPortalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortalRepositoryMockRecorder
}

// MockPortalRepositoryMockRecorder is the mock recorder for MockPortalRepository.
type MockPortalRepositoryMockRecorder struct {
	mock *MockPortalRepository
}

// NewMockPortalRepository creates a new mock instance.
func NewMockPortalRepository(ctrl *gomock.Controller) *MockPortalRepository {
	mock := &MockPortalRepository{ctrl: ctrl}
	mock.recorder = &MockPortalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalRepository) EXPECT() *MockPortalRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockPortalRepository) GetUser(ctx context.Context, traQID string) (*domain.PortalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, traQID)
	ret0, _ := ret[0].(*domain.PortalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockPortalRepositoryMockRecorder) GetUser(ctx, traQID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockPortalRepository)(nil).GetUser), ctx, traQID)
}

// GetUsers mocks base method.
func (m *MockPortalRepository) GetUsers(ctx context.Context) ([]*domain.PortalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*domain.PortalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockPortalRepositoryMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockPortalRepository)(nil).GetUsers), ctx)
}

// MakeUserMp mocks base method.
func (m *MockPortalRepository) MakeUserMp() (map[string]*domain.PortalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeUserMp")
	ret0, _ := ret[0].(map[string]*domain.PortalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeUserMp indicates an expected call of MakeUserMp.
func (mr *MockPortalRepositoryMockRecorder) MakeUserMp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeUserMp", reflect.TypeOf((*MockPortalRepository)(nil).MakeUserMp))
}
