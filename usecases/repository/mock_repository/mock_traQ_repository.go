// Code generated by MockGen. DO NOT EDIT.
// Source: traQ_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/traPtitech/traPortfolio/domain"
)

// MockTraQRepository is a mock of TraQRepository interface.
type MockTraQRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTraQRepositoryMockRecorder
}

// MockTraQRepositoryMockRecorder is the mock recorder for MockTraQRepository.
type MockTraQRepositoryMockRecorder struct {
	mock *MockTraQRepository
}

// NewMockTraQRepository creates a new mock instance.
func NewMockTraQRepository(ctrl *gomock.Controller) *MockTraQRepository {
	mock := &MockTraQRepository{ctrl: ctrl}
	mock.recorder = &MockTraQRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraQRepository) EXPECT() *MockTraQRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockTraQRepository) GetUser(arg0 context.Context, arg1 uuid.UUID) (*domain.TraQUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*domain.TraQUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTraQRepositoryMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTraQRepository)(nil).GetUser), arg0, arg1)
}
