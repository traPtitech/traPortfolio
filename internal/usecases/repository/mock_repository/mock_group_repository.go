// Code generated by MockGen. DO NOT EDIT.
// Source: group_repository.go
//
// Generated by this command:
//
//	mockgen -typed -source=group_repository.go -destination=mock_repository/mock_group_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	domain "github.com/traPtitech/traPortfolio/internal/domain"
	repository "github.com/traPtitech/traPortfolio/internal/usecases/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupRepository is a mock of GroupRepository interface.
type MockGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryMockRecorder
	isgomock struct{}
}

// MockGroupRepositoryMockRecorder is the mock recorder for MockGroupRepository.
type MockGroupRepositoryMockRecorder struct {
	mock *MockGroupRepository
}

// NewMockGroupRepository creates a new mock instance.
func NewMockGroupRepository(ctrl *gomock.Controller) *MockGroupRepository {
	mock := &MockGroupRepository{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepository) EXPECT() *MockGroupRepositoryMockRecorder {
	return m.recorder
}

// GetGroup mocks base method.
func (m *MockGroupRepository) GetGroup(ctx context.Context, groupID uuid.UUID) (*domain.GroupDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", ctx, groupID)
	ret0, _ := ret[0].(*domain.GroupDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockGroupRepositoryMockRecorder) GetGroup(ctx, groupID any) *MockGroupRepositoryGetGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockGroupRepository)(nil).GetGroup), ctx, groupID)
	return &MockGroupRepositoryGetGroupCall{Call: call}
}

// MockGroupRepositoryGetGroupCall wrap *gomock.Call
type MockGroupRepositoryGetGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupRepositoryGetGroupCall) Return(arg0 *domain.GroupDetail, arg1 error) *MockGroupRepositoryGetGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupRepositoryGetGroupCall) Do(f func(context.Context, uuid.UUID) (*domain.GroupDetail, error)) *MockGroupRepositoryGetGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupRepositoryGetGroupCall) DoAndReturn(f func(context.Context, uuid.UUID) (*domain.GroupDetail, error)) *MockGroupRepositoryGetGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroups mocks base method.
func (m *MockGroupRepository) GetGroups(ctx context.Context, args *repository.GetGroupsArgs) ([]*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, args)
	ret0, _ := ret[0].([]*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockGroupRepositoryMockRecorder) GetGroups(ctx, args any) *MockGroupRepositoryGetGroupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockGroupRepository)(nil).GetGroups), ctx, args)
	return &MockGroupRepositoryGetGroupsCall{Call: call}
}

// MockGroupRepositoryGetGroupsCall wrap *gomock.Call
type MockGroupRepositoryGetGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupRepositoryGetGroupsCall) Return(arg0 []*domain.Group, arg1 error) *MockGroupRepositoryGetGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupRepositoryGetGroupsCall) Do(f func(context.Context) ([]*domain.Group, error)) *MockGroupRepositoryGetGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupRepositoryGetGroupsCall) DoAndReturn(f func(context.Context) ([]*domain.Group, error)) *MockGroupRepositoryGetGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
