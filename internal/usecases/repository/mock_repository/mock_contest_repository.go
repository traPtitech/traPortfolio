// Code generated by MockGen. DO NOT EDIT.
// Source: contest_repository.go
//
// Generated by this command:
//
//	mockgen -typed -source=contest_repository.go -destination=mock_repository/mock_contest_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	domain "github.com/traPtitech/traPortfolio/internal/domain"
	repository "github.com/traPtitech/traPortfolio/internal/usecases/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockContestRepository is a mock of ContestRepository interface.
type MockContestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContestRepositoryMockRecorder
	isgomock struct{}
}

// MockContestRepositoryMockRecorder is the mock recorder for MockContestRepository.
type MockContestRepositoryMockRecorder struct {
	mock *MockContestRepository
}

// NewMockContestRepository creates a new mock instance.
func NewMockContestRepository(ctrl *gomock.Controller) *MockContestRepository {
	mock := &MockContestRepository{ctrl: ctrl}
	mock.recorder = &MockContestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContestRepository) EXPECT() *MockContestRepositoryMockRecorder {
	return m.recorder
}

// CreateContest mocks base method.
func (m *MockContestRepository) CreateContest(ctx context.Context, args *repository.CreateContestArgs) (*domain.ContestDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContest", ctx, args)
	ret0, _ := ret[0].(*domain.ContestDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContest indicates an expected call of CreateContest.
func (mr *MockContestRepositoryMockRecorder) CreateContest(ctx, args any) *MockContestRepositoryCreateContestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContest", reflect.TypeOf((*MockContestRepository)(nil).CreateContest), ctx, args)
	return &MockContestRepositoryCreateContestCall{Call: call}
}

// MockContestRepositoryCreateContestCall wrap *gomock.Call
type MockContestRepositoryCreateContestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryCreateContestCall) Return(arg0 *domain.ContestDetail, arg1 error) *MockContestRepositoryCreateContestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryCreateContestCall) Do(f func(context.Context, *repository.CreateContestArgs) (*domain.ContestDetail, error)) *MockContestRepositoryCreateContestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryCreateContestCall) DoAndReturn(f func(context.Context, *repository.CreateContestArgs) (*domain.ContestDetail, error)) *MockContestRepositoryCreateContestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContestTeam mocks base method.
func (m *MockContestRepository) CreateContestTeam(ctx context.Context, contestID uuid.UUID, args *repository.CreateContestTeamArgs) (*domain.ContestTeamDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContestTeam", ctx, contestID, args)
	ret0, _ := ret[0].(*domain.ContestTeamDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContestTeam indicates an expected call of CreateContestTeam.
func (mr *MockContestRepositoryMockRecorder) CreateContestTeam(ctx, contestID, args any) *MockContestRepositoryCreateContestTeamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContestTeam", reflect.TypeOf((*MockContestRepository)(nil).CreateContestTeam), ctx, contestID, args)
	return &MockContestRepositoryCreateContestTeamCall{Call: call}
}

// MockContestRepositoryCreateContestTeamCall wrap *gomock.Call
type MockContestRepositoryCreateContestTeamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryCreateContestTeamCall) Return(arg0 *domain.ContestTeamDetail, arg1 error) *MockContestRepositoryCreateContestTeamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryCreateContestTeamCall) Do(f func(context.Context, uuid.UUID, *repository.CreateContestTeamArgs) (*domain.ContestTeamDetail, error)) *MockContestRepositoryCreateContestTeamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryCreateContestTeamCall) DoAndReturn(f func(context.Context, uuid.UUID, *repository.CreateContestTeamArgs) (*domain.ContestTeamDetail, error)) *MockContestRepositoryCreateContestTeamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContest mocks base method.
func (m *MockContestRepository) DeleteContest(ctx context.Context, contestID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContest", ctx, contestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContest indicates an expected call of DeleteContest.
func (mr *MockContestRepositoryMockRecorder) DeleteContest(ctx, contestID any) *MockContestRepositoryDeleteContestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContest", reflect.TypeOf((*MockContestRepository)(nil).DeleteContest), ctx, contestID)
	return &MockContestRepositoryDeleteContestCall{Call: call}
}

// MockContestRepositoryDeleteContestCall wrap *gomock.Call
type MockContestRepositoryDeleteContestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryDeleteContestCall) Return(arg0 error) *MockContestRepositoryDeleteContestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryDeleteContestCall) Do(f func(context.Context, uuid.UUID) error) *MockContestRepositoryDeleteContestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryDeleteContestCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockContestRepositoryDeleteContestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContestTeam mocks base method.
func (m *MockContestRepository) DeleteContestTeam(ctx context.Context, contestID, teamID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContestTeam", ctx, contestID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContestTeam indicates an expected call of DeleteContestTeam.
func (mr *MockContestRepositoryMockRecorder) DeleteContestTeam(ctx, contestID, teamID any) *MockContestRepositoryDeleteContestTeamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContestTeam", reflect.TypeOf((*MockContestRepository)(nil).DeleteContestTeam), ctx, contestID, teamID)
	return &MockContestRepositoryDeleteContestTeamCall{Call: call}
}

// MockContestRepositoryDeleteContestTeamCall wrap *gomock.Call
type MockContestRepositoryDeleteContestTeamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryDeleteContestTeamCall) Return(arg0 error) *MockContestRepositoryDeleteContestTeamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryDeleteContestTeamCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockContestRepositoryDeleteContestTeamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryDeleteContestTeamCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockContestRepositoryDeleteContestTeamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditContestTeamMembers mocks base method.
func (m *MockContestRepository) EditContestTeamMembers(ctx context.Context, teamID uuid.UUID, memberIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditContestTeamMembers", ctx, teamID, memberIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditContestTeamMembers indicates an expected call of EditContestTeamMembers.
func (mr *MockContestRepositoryMockRecorder) EditContestTeamMembers(ctx, teamID, memberIDs any) *MockContestRepositoryEditContestTeamMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditContestTeamMembers", reflect.TypeOf((*MockContestRepository)(nil).EditContestTeamMembers), ctx, teamID, memberIDs)
	return &MockContestRepositoryEditContestTeamMembersCall{Call: call}
}

// MockContestRepositoryEditContestTeamMembersCall wrap *gomock.Call
type MockContestRepositoryEditContestTeamMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryEditContestTeamMembersCall) Return(arg0 error) *MockContestRepositoryEditContestTeamMembersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryEditContestTeamMembersCall) Do(f func(context.Context, uuid.UUID, []uuid.UUID) error) *MockContestRepositoryEditContestTeamMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryEditContestTeamMembersCall) DoAndReturn(f func(context.Context, uuid.UUID, []uuid.UUID) error) *MockContestRepositoryEditContestTeamMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContest mocks base method.
func (m *MockContestRepository) GetContest(ctx context.Context, contestID uuid.UUID) (*domain.ContestDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContest", ctx, contestID)
	ret0, _ := ret[0].(*domain.ContestDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContest indicates an expected call of GetContest.
func (mr *MockContestRepositoryMockRecorder) GetContest(ctx, contestID any) *MockContestRepositoryGetContestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContest", reflect.TypeOf((*MockContestRepository)(nil).GetContest), ctx, contestID)
	return &MockContestRepositoryGetContestCall{Call: call}
}

// MockContestRepositoryGetContestCall wrap *gomock.Call
type MockContestRepositoryGetContestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryGetContestCall) Return(arg0 *domain.ContestDetail, arg1 error) *MockContestRepositoryGetContestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryGetContestCall) Do(f func(context.Context, uuid.UUID) (*domain.ContestDetail, error)) *MockContestRepositoryGetContestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryGetContestCall) DoAndReturn(f func(context.Context, uuid.UUID) (*domain.ContestDetail, error)) *MockContestRepositoryGetContestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContestTeam mocks base method.
func (m *MockContestRepository) GetContestTeam(ctx context.Context, contestID, teamID uuid.UUID) (*domain.ContestTeamDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContestTeam", ctx, contestID, teamID)
	ret0, _ := ret[0].(*domain.ContestTeamDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContestTeam indicates an expected call of GetContestTeam.
func (mr *MockContestRepositoryMockRecorder) GetContestTeam(ctx, contestID, teamID any) *MockContestRepositoryGetContestTeamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContestTeam", reflect.TypeOf((*MockContestRepository)(nil).GetContestTeam), ctx, contestID, teamID)
	return &MockContestRepositoryGetContestTeamCall{Call: call}
}

// MockContestRepositoryGetContestTeamCall wrap *gomock.Call
type MockContestRepositoryGetContestTeamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryGetContestTeamCall) Return(arg0 *domain.ContestTeamDetail, arg1 error) *MockContestRepositoryGetContestTeamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryGetContestTeamCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) (*domain.ContestTeamDetail, error)) *MockContestRepositoryGetContestTeamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryGetContestTeamCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) (*domain.ContestTeamDetail, error)) *MockContestRepositoryGetContestTeamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContestTeamMembers mocks base method.
func (m *MockContestRepository) GetContestTeamMembers(ctx context.Context, contestID, teamID uuid.UUID) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContestTeamMembers", ctx, contestID, teamID)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContestTeamMembers indicates an expected call of GetContestTeamMembers.
func (mr *MockContestRepositoryMockRecorder) GetContestTeamMembers(ctx, contestID, teamID any) *MockContestRepositoryGetContestTeamMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContestTeamMembers", reflect.TypeOf((*MockContestRepository)(nil).GetContestTeamMembers), ctx, contestID, teamID)
	return &MockContestRepositoryGetContestTeamMembersCall{Call: call}
}

// MockContestRepositoryGetContestTeamMembersCall wrap *gomock.Call
type MockContestRepositoryGetContestTeamMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryGetContestTeamMembersCall) Return(arg0 []*domain.User, arg1 error) *MockContestRepositoryGetContestTeamMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryGetContestTeamMembersCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) ([]*domain.User, error)) *MockContestRepositoryGetContestTeamMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryGetContestTeamMembersCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) ([]*domain.User, error)) *MockContestRepositoryGetContestTeamMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContestTeams mocks base method.
func (m *MockContestRepository) GetContestTeams(ctx context.Context, contestID uuid.UUID) ([]*domain.ContestTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContestTeams", ctx, contestID)
	ret0, _ := ret[0].([]*domain.ContestTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContestTeams indicates an expected call of GetContestTeams.
func (mr *MockContestRepositoryMockRecorder) GetContestTeams(ctx, contestID any) *MockContestRepositoryGetContestTeamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContestTeams", reflect.TypeOf((*MockContestRepository)(nil).GetContestTeams), ctx, contestID)
	return &MockContestRepositoryGetContestTeamsCall{Call: call}
}

// MockContestRepositoryGetContestTeamsCall wrap *gomock.Call
type MockContestRepositoryGetContestTeamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryGetContestTeamsCall) Return(arg0 []*domain.ContestTeam, arg1 error) *MockContestRepositoryGetContestTeamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryGetContestTeamsCall) Do(f func(context.Context, uuid.UUID) ([]*domain.ContestTeam, error)) *MockContestRepositoryGetContestTeamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryGetContestTeamsCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]*domain.ContestTeam, error)) *MockContestRepositoryGetContestTeamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContests mocks base method.
func (m *MockContestRepository) GetContests(ctx context.Context) ([]*domain.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContests", ctx)
	ret0, _ := ret[0].([]*domain.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContests indicates an expected call of GetContests.
func (mr *MockContestRepositoryMockRecorder) GetContests(ctx any) *MockContestRepositoryGetContestsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContests", reflect.TypeOf((*MockContestRepository)(nil).GetContests), ctx)
	return &MockContestRepositoryGetContestsCall{Call: call}
}

// MockContestRepositoryGetContestsCall wrap *gomock.Call
type MockContestRepositoryGetContestsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryGetContestsCall) Return(arg0 []*domain.Contest, arg1 error) *MockContestRepositoryGetContestsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryGetContestsCall) Do(f func(context.Context) ([]*domain.Contest, error)) *MockContestRepositoryGetContestsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryGetContestsCall) DoAndReturn(f func(context.Context) ([]*domain.Contest, error)) *MockContestRepositoryGetContestsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContest mocks base method.
func (m *MockContestRepository) UpdateContest(ctx context.Context, contestID uuid.UUID, args *repository.UpdateContestArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContest", ctx, contestID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContest indicates an expected call of UpdateContest.
func (mr *MockContestRepositoryMockRecorder) UpdateContest(ctx, contestID, args any) *MockContestRepositoryUpdateContestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContest", reflect.TypeOf((*MockContestRepository)(nil).UpdateContest), ctx, contestID, args)
	return &MockContestRepositoryUpdateContestCall{Call: call}
}

// MockContestRepositoryUpdateContestCall wrap *gomock.Call
type MockContestRepositoryUpdateContestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryUpdateContestCall) Return(arg0 error) *MockContestRepositoryUpdateContestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryUpdateContestCall) Do(f func(context.Context, uuid.UUID, *repository.UpdateContestArgs) error) *MockContestRepositoryUpdateContestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryUpdateContestCall) DoAndReturn(f func(context.Context, uuid.UUID, *repository.UpdateContestArgs) error) *MockContestRepositoryUpdateContestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContestTeam mocks base method.
func (m *MockContestRepository) UpdateContestTeam(ctx context.Context, teamID uuid.UUID, args *repository.UpdateContestTeamArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContestTeam", ctx, teamID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContestTeam indicates an expected call of UpdateContestTeam.
func (mr *MockContestRepositoryMockRecorder) UpdateContestTeam(ctx, teamID, args any) *MockContestRepositoryUpdateContestTeamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContestTeam", reflect.TypeOf((*MockContestRepository)(nil).UpdateContestTeam), ctx, teamID, args)
	return &MockContestRepositoryUpdateContestTeamCall{Call: call}
}

// MockContestRepositoryUpdateContestTeamCall wrap *gomock.Call
type MockContestRepositoryUpdateContestTeamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContestRepositoryUpdateContestTeamCall) Return(arg0 error) *MockContestRepositoryUpdateContestTeamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContestRepositoryUpdateContestTeamCall) Do(f func(context.Context, uuid.UUID, *repository.UpdateContestTeamArgs) error) *MockContestRepositoryUpdateContestTeamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContestRepositoryUpdateContestTeamCall) DoAndReturn(f func(context.Context, uuid.UUID, *repository.UpdateContestTeamArgs) error) *MockContestRepositoryUpdateContestTeamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
