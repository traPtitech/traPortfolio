// Code generated by MockGen. DO NOT EDIT.
// Source: user_repository.go
//
// Generated by this command:
//
//	mockgen -typed -source=user_repository.go -destination=mock_repository/mock_user_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	domain "github.com/traPtitech/traPortfolio/internal/domain"
	repository "github.com/traPtitech/traPortfolio/internal/usecases/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockUserRepository) CreateAccount(ctx context.Context, userID uuid.UUID, args *repository.CreateAccountArgs) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, userID, args)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockUserRepositoryMockRecorder) CreateAccount(ctx, userID, args any) *MockUserRepositoryCreateAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockUserRepository)(nil).CreateAccount), ctx, userID, args)
	return &MockUserRepositoryCreateAccountCall{Call: call}
}

// MockUserRepositoryCreateAccountCall wrap *gomock.Call
type MockUserRepositoryCreateAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryCreateAccountCall) Return(arg0 *domain.Account, arg1 error) *MockUserRepositoryCreateAccountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryCreateAccountCall) Do(f func(context.Context, uuid.UUID, *repository.CreateAccountArgs) (*domain.Account, error)) *MockUserRepositoryCreateAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryCreateAccountCall) DoAndReturn(f func(context.Context, uuid.UUID, *repository.CreateAccountArgs) (*domain.Account, error)) *MockUserRepositoryCreateAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAccount mocks base method.
func (m *MockUserRepository) DeleteAccount(ctx context.Context, userID, accountID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, userID, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockUserRepositoryMockRecorder) DeleteAccount(ctx, userID, accountID any) *MockUserRepositoryDeleteAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockUserRepository)(nil).DeleteAccount), ctx, userID, accountID)
	return &MockUserRepositoryDeleteAccountCall{Call: call}
}

// MockUserRepositoryDeleteAccountCall wrap *gomock.Call
type MockUserRepositoryDeleteAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryDeleteAccountCall) Return(arg0 error) *MockUserRepositoryDeleteAccountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryDeleteAccountCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockUserRepositoryDeleteAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryDeleteAccountCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockUserRepositoryDeleteAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAccount mocks base method.
func (m *MockUserRepository) GetAccount(ctx context.Context, userID, accountID uuid.UUID) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, userID, accountID)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockUserRepositoryMockRecorder) GetAccount(ctx, userID, accountID any) *MockUserRepositoryGetAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockUserRepository)(nil).GetAccount), ctx, userID, accountID)
	return &MockUserRepositoryGetAccountCall{Call: call}
}

// MockUserRepositoryGetAccountCall wrap *gomock.Call
type MockUserRepositoryGetAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetAccountCall) Return(arg0 *domain.Account, arg1 error) *MockUserRepositoryGetAccountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetAccountCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) (*domain.Account, error)) *MockUserRepositoryGetAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetAccountCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) (*domain.Account, error)) *MockUserRepositoryGetAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAccounts mocks base method.
func (m *MockUserRepository) GetAccounts(ctx context.Context, userID uuid.UUID) ([]*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, userID)
	ret0, _ := ret[0].([]*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockUserRepositoryMockRecorder) GetAccounts(ctx, userID any) *MockUserRepositoryGetAccountsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockUserRepository)(nil).GetAccounts), ctx, userID)
	return &MockUserRepositoryGetAccountsCall{Call: call}
}

// MockUserRepositoryGetAccountsCall wrap *gomock.Call
type MockUserRepositoryGetAccountsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetAccountsCall) Return(arg0 []*domain.Account, arg1 error) *MockUserRepositoryGetAccountsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetAccountsCall) Do(f func(context.Context, uuid.UUID) ([]*domain.Account, error)) *MockUserRepositoryGetAccountsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetAccountsCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]*domain.Account, error)) *MockUserRepositoryGetAccountsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContests mocks base method.
func (m *MockUserRepository) GetContests(ctx context.Context, userID uuid.UUID) ([]*domain.UserContest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContests", ctx, userID)
	ret0, _ := ret[0].([]*domain.UserContest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContests indicates an expected call of GetContests.
func (mr *MockUserRepositoryMockRecorder) GetContests(ctx, userID any) *MockUserRepositoryGetContestsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContests", reflect.TypeOf((*MockUserRepository)(nil).GetContests), ctx, userID)
	return &MockUserRepositoryGetContestsCall{Call: call}
}

// MockUserRepositoryGetContestsCall wrap *gomock.Call
type MockUserRepositoryGetContestsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetContestsCall) Return(arg0 []*domain.UserContest, arg1 error) *MockUserRepositoryGetContestsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetContestsCall) Do(f func(context.Context, uuid.UUID) ([]*domain.UserContest, error)) *MockUserRepositoryGetContestsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetContestsCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]*domain.UserContest, error)) *MockUserRepositoryGetContestsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupsByUserID mocks base method.
func (m *MockUserRepository) GetGroupsByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsByUserID indicates an expected call of GetGroupsByUserID.
func (mr *MockUserRepositoryMockRecorder) GetGroupsByUserID(ctx, userID any) *MockUserRepositoryGetGroupsByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByUserID", reflect.TypeOf((*MockUserRepository)(nil).GetGroupsByUserID), ctx, userID)
	return &MockUserRepositoryGetGroupsByUserIDCall{Call: call}
}

// MockUserRepositoryGetGroupsByUserIDCall wrap *gomock.Call
type MockUserRepositoryGetGroupsByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetGroupsByUserIDCall) Return(arg0 []*domain.UserGroup, arg1 error) *MockUserRepositoryGetGroupsByUserIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetGroupsByUserIDCall) Do(f func(context.Context, uuid.UUID) ([]*domain.UserGroup, error)) *MockUserRepositoryGetGroupsByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetGroupsByUserIDCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]*domain.UserGroup, error)) *MockUserRepositoryGetGroupsByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjects mocks base method.
func (m *MockUserRepository) GetProjects(ctx context.Context, userID uuid.UUID) ([]*domain.UserProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx, userID)
	ret0, _ := ret[0].([]*domain.UserProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockUserRepositoryMockRecorder) GetProjects(ctx, userID any) *MockUserRepositoryGetProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockUserRepository)(nil).GetProjects), ctx, userID)
	return &MockUserRepositoryGetProjectsCall{Call: call}
}

// MockUserRepositoryGetProjectsCall wrap *gomock.Call
type MockUserRepositoryGetProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetProjectsCall) Return(arg0 []*domain.UserProject, arg1 error) *MockUserRepositoryGetProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetProjectsCall) Do(f func(context.Context, uuid.UUID) ([]*domain.UserProject, error)) *MockUserRepositoryGetProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetProjectsCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]*domain.UserProject, error)) *MockUserRepositoryGetProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, userID uuid.UUID) (*domain.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*domain.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, userID any) *MockUserRepositoryGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, userID)
	return &MockUserRepositoryGetUserCall{Call: call}
}

// MockUserRepositoryGetUserCall wrap *gomock.Call
type MockUserRepositoryGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetUserCall) Return(arg0 *domain.UserDetail, arg1 error) *MockUserRepositoryGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetUserCall) Do(f func(context.Context, uuid.UUID) (*domain.UserDetail, error)) *MockUserRepositoryGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetUserCall) DoAndReturn(f func(context.Context, uuid.UUID) (*domain.UserDetail, error)) *MockUserRepositoryGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsers mocks base method.
func (m *MockUserRepository) GetUsers(ctx context.Context, args *repository.GetUsersArgs) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, args)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepositoryMockRecorder) GetUsers(ctx, args any) *MockUserRepositoryGetUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepository)(nil).GetUsers), ctx, args)
	return &MockUserRepositoryGetUsersCall{Call: call}
}

// MockUserRepositoryGetUsersCall wrap *gomock.Call
type MockUserRepositoryGetUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetUsersCall) Return(arg0 []*domain.User, arg1 error) *MockUserRepositoryGetUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetUsersCall) Do(f func(context.Context, *repository.GetUsersArgs) ([]*domain.User, error)) *MockUserRepositoryGetUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetUsersCall) DoAndReturn(f func(context.Context, *repository.GetUsersArgs) ([]*domain.User, error)) *MockUserRepositoryGetUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SyncUsers mocks base method.
func (m *MockUserRepository) SyncUsers(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncUsers", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncUsers indicates an expected call of SyncUsers.
func (mr *MockUserRepositoryMockRecorder) SyncUsers(ctx any) *MockUserRepositorySyncUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncUsers", reflect.TypeOf((*MockUserRepository)(nil).SyncUsers), ctx)
	return &MockUserRepositorySyncUsersCall{Call: call}
}

// MockUserRepositorySyncUsersCall wrap *gomock.Call
type MockUserRepositorySyncUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositorySyncUsersCall) Return(arg0 error) *MockUserRepositorySyncUsersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositorySyncUsersCall) Do(f func(context.Context) error) *MockUserRepositorySyncUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositorySyncUsersCall) DoAndReturn(f func(context.Context) error) *MockUserRepositorySyncUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAccount mocks base method.
func (m *MockUserRepository) UpdateAccount(ctx context.Context, userID, accountID uuid.UUID, args *repository.UpdateAccountArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, userID, accountID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockUserRepositoryMockRecorder) UpdateAccount(ctx, userID, accountID, args any) *MockUserRepositoryUpdateAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockUserRepository)(nil).UpdateAccount), ctx, userID, accountID, args)
	return &MockUserRepositoryUpdateAccountCall{Call: call}
}

// MockUserRepositoryUpdateAccountCall wrap *gomock.Call
type MockUserRepositoryUpdateAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryUpdateAccountCall) Return(arg0 error) *MockUserRepositoryUpdateAccountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryUpdateAccountCall) Do(f func(context.Context, uuid.UUID, uuid.UUID, *repository.UpdateAccountArgs) error) *MockUserRepositoryUpdateAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryUpdateAccountCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID, *repository.UpdateAccountArgs) error) *MockUserRepositoryUpdateAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, userID uuid.UUID, args *repository.UpdateUserArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, userID, args any) *MockUserRepositoryUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, userID, args)
	return &MockUserRepositoryUpdateUserCall{Call: call}
}

// MockUserRepositoryUpdateUserCall wrap *gomock.Call
type MockUserRepositoryUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryUpdateUserCall) Return(arg0 error) *MockUserRepositoryUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryUpdateUserCall) Do(f func(context.Context, uuid.UUID, *repository.UpdateUserArgs) error) *MockUserRepositoryUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryUpdateUserCall) DoAndReturn(f func(context.Context, uuid.UUID, *repository.UpdateUserArgs) error) *MockUserRepositoryUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
