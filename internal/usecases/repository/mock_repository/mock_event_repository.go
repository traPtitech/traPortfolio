// Code generated by MockGen. DO NOT EDIT.
// Source: event_repository.go
//
// Generated by this command:
//
//	mockgen -typed -source=event_repository.go -destination=mock_repository/mock_event_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	domain "github.com/traPtitech/traPortfolio/internal/domain"
	repository "github.com/traPtitech/traPortfolio/internal/usecases/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
	isgomock struct{}
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// CreateEventLevel mocks base method.
func (m *MockEventRepository) CreateEventLevel(ctx context.Context, args *repository.CreateEventLevelArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventLevel", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventLevel indicates an expected call of CreateEventLevel.
func (mr *MockEventRepositoryMockRecorder) CreateEventLevel(ctx, args any) *MockEventRepositoryCreateEventLevelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventLevel", reflect.TypeOf((*MockEventRepository)(nil).CreateEventLevel), ctx, args)
	return &MockEventRepositoryCreateEventLevelCall{Call: call}
}

// MockEventRepositoryCreateEventLevelCall wrap *gomock.Call
type MockEventRepositoryCreateEventLevelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventRepositoryCreateEventLevelCall) Return(arg0 error) *MockEventRepositoryCreateEventLevelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventRepositoryCreateEventLevelCall) Do(f func(context.Context, *repository.CreateEventLevelArgs) error) *MockEventRepositoryCreateEventLevelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventRepositoryCreateEventLevelCall) DoAndReturn(f func(context.Context, *repository.CreateEventLevelArgs) error) *MockEventRepositoryCreateEventLevelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEvent mocks base method.
func (m *MockEventRepository) GetEvent(ctx context.Context, eventID uuid.UUID) (*domain.EventDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, eventID)
	ret0, _ := ret[0].(*domain.EventDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventRepositoryMockRecorder) GetEvent(ctx, eventID any) *MockEventRepositoryGetEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventRepository)(nil).GetEvent), ctx, eventID)
	return &MockEventRepositoryGetEventCall{Call: call}
}

// MockEventRepositoryGetEventCall wrap *gomock.Call
type MockEventRepositoryGetEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventRepositoryGetEventCall) Return(arg0 *domain.EventDetail, arg1 error) *MockEventRepositoryGetEventCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventRepositoryGetEventCall) Do(f func(context.Context, uuid.UUID) (*domain.EventDetail, error)) *MockEventRepositoryGetEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventRepositoryGetEventCall) DoAndReturn(f func(context.Context, uuid.UUID) (*domain.EventDetail, error)) *MockEventRepositoryGetEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEvents mocks base method.
func (m *MockEventRepository) GetEvents(ctx context.Context) ([]*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx)
	ret0, _ := ret[0].([]*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventRepositoryMockRecorder) GetEvents(ctx any) *MockEventRepositoryGetEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventRepository)(nil).GetEvents), ctx)
	return &MockEventRepositoryGetEventsCall{Call: call}
}

// MockEventRepositoryGetEventsCall wrap *gomock.Call
type MockEventRepositoryGetEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventRepositoryGetEventsCall) Return(arg0 []*domain.Event, arg1 error) *MockEventRepositoryGetEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventRepositoryGetEventsCall) Do(f func(context.Context) ([]*domain.Event, error)) *MockEventRepositoryGetEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventRepositoryGetEventsCall) DoAndReturn(f func(context.Context) ([]*domain.Event, error)) *MockEventRepositoryGetEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserEvents mocks base method.
func (m *MockEventRepository) GetUserEvents(ctx context.Context, userID uuid.UUID) ([]*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEvents", ctx, userID)
	ret0, _ := ret[0].([]*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEvents indicates an expected call of GetUserEvents.
func (mr *MockEventRepositoryMockRecorder) GetUserEvents(ctx, userID any) *MockEventRepositoryGetUserEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEvents", reflect.TypeOf((*MockEventRepository)(nil).GetUserEvents), ctx, userID)
	return &MockEventRepositoryGetUserEventsCall{Call: call}
}

// MockEventRepositoryGetUserEventsCall wrap *gomock.Call
type MockEventRepositoryGetUserEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventRepositoryGetUserEventsCall) Return(arg0 []*domain.Event, arg1 error) *MockEventRepositoryGetUserEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventRepositoryGetUserEventsCall) Do(f func(context.Context, uuid.UUID) ([]*domain.Event, error)) *MockEventRepositoryGetUserEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventRepositoryGetUserEventsCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]*domain.Event, error)) *MockEventRepositoryGetUserEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateEventLevel mocks base method.
func (m *MockEventRepository) UpdateEventLevel(ctx context.Context, eventID uuid.UUID, args *repository.UpdateEventLevelArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventLevel", ctx, eventID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventLevel indicates an expected call of UpdateEventLevel.
func (mr *MockEventRepositoryMockRecorder) UpdateEventLevel(ctx, eventID, args any) *MockEventRepositoryUpdateEventLevelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventLevel", reflect.TypeOf((*MockEventRepository)(nil).UpdateEventLevel), ctx, eventID, args)
	return &MockEventRepositoryUpdateEventLevelCall{Call: call}
}

// MockEventRepositoryUpdateEventLevelCall wrap *gomock.Call
type MockEventRepositoryUpdateEventLevelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventRepositoryUpdateEventLevelCall) Return(arg0 error) *MockEventRepositoryUpdateEventLevelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventRepositoryUpdateEventLevelCall) Do(f func(context.Context, uuid.UUID, *repository.UpdateEventLevelArgs) error) *MockEventRepositoryUpdateEventLevelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventRepositoryUpdateEventLevelCall) DoAndReturn(f func(context.Context, uuid.UUID, *repository.UpdateEventLevelArgs) error) *MockEventRepositoryUpdateEventLevelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
