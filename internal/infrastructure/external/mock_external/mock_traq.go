// Code generated by MockGen. DO NOT EDIT.
// Source: traq.go
//
// Generated by this command:
//
//	mockgen -typed -source=traq.go -destination=mock_external/mock_traq.go
//

// Package mock_external is a generated GoMock package.
package mock_external

import (
	reflect "reflect"

	external "github.com/traPtitech/traPortfolio/internal/infrastructure/external"
	gomock "go.uber.org/mock/gomock"
)

// MockTraQAPI is a mock of TraQAPI interface.
type MockTraQAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTraQAPIMockRecorder
	isgomock struct{}
}

// MockTraQAPIMockRecorder is the mock recorder for MockTraQAPI.
type MockTraQAPIMockRecorder struct {
	mock *MockTraQAPI
}

// NewMockTraQAPI creates a new mock instance.
func NewMockTraQAPI(ctrl *gomock.Controller) *MockTraQAPI {
	mock := &MockTraQAPI{ctrl: ctrl}
	mock.recorder = &MockTraQAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraQAPI) EXPECT() *MockTraQAPIMockRecorder {
	return m.recorder
}

// GetUsers mocks base method.
func (m *MockTraQAPI) GetUsers(args *external.TraQGetAllArgs) ([]*external.TraQUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", args)
	ret0, _ := ret[0].([]*external.TraQUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockTraQAPIMockRecorder) GetUsers(args any) *MockTraQAPIGetUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockTraQAPI)(nil).GetUsers), args)
	return &MockTraQAPIGetUsersCall{Call: call}
}

// MockTraQAPIGetUsersCall wrap *gomock.Call
type MockTraQAPIGetUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTraQAPIGetUsersCall) Return(arg0 []*external.TraQUserResponse, arg1 error) *MockTraQAPIGetUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTraQAPIGetUsersCall) Do(f func(*external.TraQGetAllArgs) ([]*external.TraQUserResponse, error)) *MockTraQAPIGetUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTraQAPIGetUsersCall) DoAndReturn(f func(*external.TraQGetAllArgs) ([]*external.TraQUserResponse, error)) *MockTraQAPIGetUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
