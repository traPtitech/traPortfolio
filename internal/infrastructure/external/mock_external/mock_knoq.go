// Code generated by MockGen. DO NOT EDIT.
// Source: knoq.go
//
// Generated by this command:
//
//	mockgen -typed -source=knoq.go -destination=mock_external/mock_knoq.go
//

// Package mock_external is a generated GoMock package.
package mock_external

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	external "github.com/traPtitech/traPortfolio/internal/infrastructure/external"
	gomock "go.uber.org/mock/gomock"
)

// MockKnoqAPI is a mock of KnoqAPI interface.
type MockKnoqAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKnoqAPIMockRecorder
}

// MockKnoqAPIMockRecorder is the mock recorder for MockKnoqAPI.
type MockKnoqAPIMockRecorder struct {
	mock *MockKnoqAPI
}

// NewMockKnoqAPI creates a new mock instance.
func NewMockKnoqAPI(ctrl *gomock.Controller) *MockKnoqAPI {
	mock := &MockKnoqAPI{ctrl: ctrl}
	mock.recorder = &MockKnoqAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnoqAPI) EXPECT() *MockKnoqAPIMockRecorder {
	return m.recorder
}

// GetEvent mocks base method.
func (m *MockKnoqAPI) GetEvent(eventID uuid.UUID) (*external.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", eventID)
	ret0, _ := ret[0].(*external.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockKnoqAPIMockRecorder) GetEvent(eventID any) *MockKnoqAPIGetEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockKnoqAPI)(nil).GetEvent), eventID)
	return &MockKnoqAPIGetEventCall{Call: call}
}

// MockKnoqAPIGetEventCall wrap *gomock.Call
type MockKnoqAPIGetEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKnoqAPIGetEventCall) Return(arg0 *external.EventResponse, arg1 error) *MockKnoqAPIGetEventCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKnoqAPIGetEventCall) Do(f func(uuid.UUID) (*external.EventResponse, error)) *MockKnoqAPIGetEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKnoqAPIGetEventCall) DoAndReturn(f func(uuid.UUID) (*external.EventResponse, error)) *MockKnoqAPIGetEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEvents mocks base method.
func (m *MockKnoqAPI) GetEvents() ([]*external.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents")
	ret0, _ := ret[0].([]*external.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockKnoqAPIMockRecorder) GetEvents() *MockKnoqAPIGetEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockKnoqAPI)(nil).GetEvents))
	return &MockKnoqAPIGetEventsCall{Call: call}
}

// MockKnoqAPIGetEventsCall wrap *gomock.Call
type MockKnoqAPIGetEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKnoqAPIGetEventsCall) Return(arg0 []*external.EventResponse, arg1 error) *MockKnoqAPIGetEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKnoqAPIGetEventsCall) Do(f func() ([]*external.EventResponse, error)) *MockKnoqAPIGetEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKnoqAPIGetEventsCall) DoAndReturn(f func() ([]*external.EventResponse, error)) *MockKnoqAPIGetEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEventsByUserID mocks base method.
func (m *MockKnoqAPI) GetEventsByUserID(userID uuid.UUID) ([]*external.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByUserID", userID)
	ret0, _ := ret[0].([]*external.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByUserID indicates an expected call of GetEventsByUserID.
func (mr *MockKnoqAPIMockRecorder) GetEventsByUserID(userID any) *MockKnoqAPIGetEventsByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByUserID", reflect.TypeOf((*MockKnoqAPI)(nil).GetEventsByUserID), userID)
	return &MockKnoqAPIGetEventsByUserIDCall{Call: call}
}

// MockKnoqAPIGetEventsByUserIDCall wrap *gomock.Call
type MockKnoqAPIGetEventsByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKnoqAPIGetEventsByUserIDCall) Return(arg0 []*external.EventResponse, arg1 error) *MockKnoqAPIGetEventsByUserIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKnoqAPIGetEventsByUserIDCall) Do(f func(uuid.UUID) ([]*external.EventResponse, error)) *MockKnoqAPIGetEventsByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKnoqAPIGetEventsByUserIDCall) DoAndReturn(f func(uuid.UUID) ([]*external.EventResponse, error)) *MockKnoqAPIGetEventsByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
