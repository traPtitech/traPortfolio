// Code generated by MockGen. DO NOT EDIT.
// Source: portal.go
//
// Generated by this command:
//
//	mockgen -typed -source=portal.go -destination=mock_external/mock_portal.go
//

// Package mock_external is a generated GoMock package.
package mock_external

import (
	reflect "reflect"

	external "github.com/traPtitech/traPortfolio/internal/infrastructure/external"
	gomock "go.uber.org/mock/gomock"
)

// MockPortalAPI is a mock of PortalAPI interface.
type MockPortalAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPortalAPIMockRecorder
}

// MockPortalAPIMockRecorder is the mock recorder for MockPortalAPI.
type MockPortalAPIMockRecorder struct {
	mock *MockPortalAPI
}

// NewMockPortalAPI creates a new mock instance.
func NewMockPortalAPI(ctrl *gomock.Controller) *MockPortalAPI {
	mock := &MockPortalAPI{ctrl: ctrl}
	mock.recorder = &MockPortalAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalAPI) EXPECT() *MockPortalAPIMockRecorder {
	return m.recorder
}

// GetUserByTraqID mocks base method.
func (m *MockPortalAPI) GetUserByTraqID(traQID string) (*external.PortalUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByTraqID", traQID)
	ret0, _ := ret[0].(*external.PortalUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTraqID indicates an expected call of GetUserByTraqID.
func (mr *MockPortalAPIMockRecorder) GetUserByTraqID(traQID any) *MockPortalAPIGetUserByTraqIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTraqID", reflect.TypeOf((*MockPortalAPI)(nil).GetUserByTraqID), traQID)
	return &MockPortalAPIGetUserByTraqIDCall{Call: call}
}

// MockPortalAPIGetUserByTraqIDCall wrap *gomock.Call
type MockPortalAPIGetUserByTraqIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortalAPIGetUserByTraqIDCall) Return(arg0 *external.PortalUserResponse, arg1 error) *MockPortalAPIGetUserByTraqIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortalAPIGetUserByTraqIDCall) Do(f func(string) (*external.PortalUserResponse, error)) *MockPortalAPIGetUserByTraqIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortalAPIGetUserByTraqIDCall) DoAndReturn(f func(string) (*external.PortalUserResponse, error)) *MockPortalAPIGetUserByTraqIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsers mocks base method.
func (m *MockPortalAPI) GetUsers() ([]*external.PortalUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]*external.PortalUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockPortalAPIMockRecorder) GetUsers() *MockPortalAPIGetUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockPortalAPI)(nil).GetUsers))
	return &MockPortalAPIGetUsersCall{Call: call}
}

// MockPortalAPIGetUsersCall wrap *gomock.Call
type MockPortalAPIGetUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortalAPIGetUsersCall) Return(arg0 []*external.PortalUserResponse, arg1 error) *MockPortalAPIGetUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortalAPIGetUsersCall) Do(f func() ([]*external.PortalUserResponse, error)) *MockPortalAPIGetUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortalAPIGetUsersCall) DoAndReturn(f func() ([]*external.PortalUserResponse, error)) *MockPortalAPIGetUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
