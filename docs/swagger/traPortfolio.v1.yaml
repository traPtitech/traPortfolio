openapi: 3.0.0
info:
  title: traPortfolio
  version: '1.0'
  contact:
    name: traP
    url: 'https://github.com/traPtitech/traPortfolio'
  description: traPortfolio v1 API
servers:
  - url: 'http://localhost:3000'
paths:
  /users:
    get:
      summary: ユーザーのリストを取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      operationId: getUsers
      description: |-
        ユーザー情報を取得します
        `include-suspended`を指定しない場合、レスポンスに非アクティブユーザーは含まれません。
      parameters:
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: include-suspended
          description: アカウントがアクティブでないユーザーを含めるかどうか
      tags:
        - user
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
    get:
      summary: ユーザー詳細情報の取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '404':
          description: Not Found
      operationId: getUser
      description: ユーザー詳細情報を取得します
      tags:
        - user
    patch:
      summary: ユーザー情報の編集
      operationId: editUser
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
      description: ユーザー情報を修正します
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserRequest'
  '/user/{userId}/projects':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
    get:
      summary: ユーザーが所属するプロジェクトの取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '404':
          description: Not Found
      operationId: getUsersProject
      description: ユーザーが所属している（いた）プロジェクトを取得します
      tags:
        - user
        - user project
  /projects:
    get:
      summary: プロジェクトのリストを取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
      operationId: getProjects
      description: プロジェクトのリストを取得します
      tags:
        - project
    post:
      summary: プロジェクトの作成
      operationId: postProject
      responses:
        '200':
          description: OK
      description: プロジェクトを作成します
      tags:
        - project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProjectRequest'
  '/projects/{projectId}':
    parameters:
      - $ref: '#/components/parameters/projectIdInPath'
    get:
      summary: プロジェクト詳細情報を取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not Found
      operationId: getProject
      description: プロジェクトの詳細情報を取得します
      tags:
        - project
    patch:
      summary: プロジェクト詳細情報の修正
      operationId: editProject
      responses:
        '200':
          description: OK
      description: プロジェクト情報を修正します
      tags:
        - project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProjectRequest'
  /events:
    get:
      summary: イベントリストを取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      operationId: getEvents
      description: イベント情報を取得します
      tags:
        - event
    parameters: []
  /groups:
    get:
      summary: 班のリストの取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      operationId: getGroups
      description: 班のリストを取得します
      tags:
        - group
    parameters: []
  '/events/{eventId}':
    parameters:
      - $ref: '#/components/parameters/eventIdInPath'
    get:
      summary: イベント詳細情報を取得
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: getEvent
      description: イベント情報詳細を取得します
      tags:
        - event
  /contests:
    get:
      summary: コンテストのリストの取得
      tags:
        - contest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contest'
      operationId: getContests
      description: コンテストのリストを取得します
    parameters: []
    post:
      summary: コンテストの作成
      operationId: postContest
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostContestRequest'
      tags:
        - contest
      description: コンテストを作成します
  '/contests/{contestId}':
    parameters:
      - $ref: '#/components/parameters/contestIdInPath'
    get:
      summary: 大会詳細情報の取得
      tags:
        - contest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contest'
        '404':
          description: Not Found
      operationId: getContest
      description: コンテスト詳細情報を取得します
components:
  schemas:
    User:
      title: User
      type: object
      description: ユーザー情報
      x-examples: {}
      properties:
        id:
          type: string
          description: ユーザーUUID
          format: uuid
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: ユーザー名
        displayName:
          type: string
          description: ユーザー表示名
          minLength: 0
          maxLength: 32
        state:
          $ref: '#/components/schemas/UserAccountState'
      required:
        - id
        - name
        - displayName
        - state
    UserAccountState:
      type: integer
      title: UserAccountState
      description: |-
        ユーザーアカウント状態
        0: 停止
        1: 有効
        2: 一時停止
      enum:
        - 0
        - 1
        - 2
      x-enum-varnames:
        - deactivated
        - active
        - suspended
      format: int32
    UserDetail:
      title: UserDetail
      type: object
      description: ユーザー詳細情報
      properties:
        id:
          type: string
          format: uuid
          description: ユーザーUUID
        state:
          $ref: '#/components/schemas/UserAccountState'
        displayName:
          type: string
          description: ユーザー表示名
          minLength: 0
          maxLength: 32
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: ユーザー名
        bio:
          type: string
          description: 自己紹介(biography)
          maxLength: 1000
        realName:
          type: string
          description: ユーザー本名
      required:
        - id
        - state
        - displayName
        - name
        - bio
    EditUserRequest:
      title: EditUserRequest
      type: object
      properties:
        bio:
          type: string
          description: 自己紹介(biography)
        check:
          type: boolean
          description: 本名を公開するかどうか
    Project:
      title: Project
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMember'
        since:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        createdAt:
          type: string
        updatedAt:
          type: string
    ProjectMember:
      title: ProjectMember
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        since:
          type: string
        until:
          type: string
    Event:
      type: object
      properties:
        name:
          type: string
          example: 第n回進捗回
        descirption:
          type: string
          example: 第n回の進捗会です。
        sharedRoom:
          type: boolean
          example: false
        timeStart:
          type: string
          example: '2004-04-01T12:00Z'
        timeEnd:
          type: string
          example: '2004-04-01T12:00Z'
        roomId:
          type: string
          format: uuid
          example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
        groupId:
          type: string
          format: uuid
          example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
    Contest:
      title: Contest
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/ContestMember'
    ContestMember:
      title: ContestMember
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Group:
      title: Group
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        leader:
          $ref: '#/components/schemas/User'
        members:
          type: array
          items:
            $ref: '#/components/schemas/GroupMember'
        activity:
          type: string
        achievement:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
    GroupMember:
      title: GroupMember
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        since:
          type: string
        until:
          type: string
    Achievement:
      title: Achievement
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    PostProjectRequest:
      title: PostProjectRequest
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMember'
        since:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
    PostContestRequest:
      title: PostContestRequest
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
  parameters:
    userIdInPath:
      name: userId
      in: path
      required: true
      description: ユーザーUUID
      schema:
        type: string
        format: uuid
    projectIdInPath:
      name: projectId
      in: path
      required: true
      description: プロジェクトUUID
      schema:
        type: string
        format: uuid
    eventIdInPath:
      name: eventId
      in: path
      required: true
      description: イベントUUID
      schema:
        type: string
        format: uuid
    contestIdInPath:
      name: contestId
      in: path
      required: true
      description: コンテストUUID
      schema:
        type: string
        format: uuid
tags:
  - name: user
    description: ユーザーAPI
  - name: project
    description: プロジェクトAPI
  - name: event
    description: イベントAPI
  - name: group
    description: 班API
  - name: user project
    description: ユーザープロジェクトAPI
  - name: contest
    description: 大会・コンテストAPI
